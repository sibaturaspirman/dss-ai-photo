"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/uuid-random";
exports.ids = ["vendor-chunks/uuid-random"];
exports.modules = {

/***/ "(ssr)/./node_modules/uuid-random/index.js":
/*!*******************************************!*\
  !*** ./node_modules/uuid-random/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n(function() {\n    var buf, bufIdx = 0, hexBytes = [], i;\n    // Pre-calculate toString(16) for speed\n    for(i = 0; i < 256; i++){\n        hexBytes[i] = (i + 0x100).toString(16).substr(1);\n    }\n    // Buffer random numbers for speed\n    // Reduce memory usage by decreasing this number (min 16)\n    // or improve speed by increasing this number (try 16384)\n    uuid.BUFFER_SIZE = 4096;\n    // Binary uuids\n    uuid.bin = uuidBin;\n    // Clear buffer\n    uuid.clearBuffer = function() {\n        buf = null;\n        bufIdx = 0;\n    };\n    // Test for uuid\n    uuid.test = function(uuid) {\n        if (typeof uuid === \"string\") {\n            return /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(uuid);\n        }\n        return false;\n    };\n    // Node & Browser support\n    var crypt0;\n    if (typeof crypto !== \"undefined\") {\n        crypt0 = crypto;\n    } else if (false) {}\n    if (true) {\n        crypt0 = crypt0 || __webpack_require__(/*! crypto */ \"crypto\");\n        module.exports = uuid;\n    } else {}\n    // Use best available PRNG\n    // Also expose this so you can override it.\n    uuid.randomBytes = function() {\n        if (crypt0) {\n            if (crypt0.randomBytes) {\n                return crypt0.randomBytes;\n            }\n            if (crypt0.getRandomValues) {\n                if (typeof Uint8Array.prototype.slice !== \"function\") {\n                    return function(n) {\n                        var bytes = new Uint8Array(n);\n                        crypt0.getRandomValues(bytes);\n                        return Array.from(bytes);\n                    };\n                }\n                return function(n) {\n                    var bytes = new Uint8Array(n);\n                    crypt0.getRandomValues(bytes);\n                    return bytes;\n                };\n            }\n        }\n        return function(n) {\n            var i, r = [];\n            for(i = 0; i < n; i++){\n                r.push(Math.floor(Math.random() * 256));\n            }\n            return r;\n        };\n    }();\n    // Buffer some random bytes for speed\n    function randomBytesBuffered(n) {\n        if (!buf || bufIdx + n > uuid.BUFFER_SIZE) {\n            bufIdx = 0;\n            buf = uuid.randomBytes(uuid.BUFFER_SIZE);\n        }\n        return buf.slice(bufIdx, bufIdx += n);\n    }\n    // uuid.bin\n    function uuidBin() {\n        var b = randomBytesBuffered(16);\n        b[6] = b[6] & 0x0f | 0x40;\n        b[8] = b[8] & 0x3f | 0x80;\n        return b;\n    }\n    // String UUIDv4 (Random)\n    function uuid() {\n        var b = uuidBin();\n        return hexBytes[b[0]] + hexBytes[b[1]] + hexBytes[b[2]] + hexBytes[b[3]] + \"-\" + hexBytes[b[4]] + hexBytes[b[5]] + \"-\" + hexBytes[b[6]] + hexBytes[b[7]] + \"-\" + hexBytes[b[8]] + hexBytes[b[9]] + \"-\" + hexBytes[b[10]] + hexBytes[b[11]] + hexBytes[b[12]] + hexBytes[b[13]] + hexBytes[b[14]] + hexBytes[b[15]];\n    }\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXVpZC1yYW5kb20vaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFWjtJQUVDLElBQ0VBLEtBQ0FDLFNBQVMsR0FDVEMsV0FBVyxFQUFFLEVBQ2JDO0lBR0YsdUNBQXVDO0lBQ3ZDLElBQUtBLElBQUksR0FBR0EsSUFBSSxLQUFLQSxJQUFLO1FBQ3hCRCxRQUFRLENBQUNDLEVBQUUsR0FBRyxDQUFDQSxJQUFJLEtBQUksRUFBR0MsUUFBUSxDQUFDLElBQUlDLE1BQU0sQ0FBQztJQUNoRDtJQUVBLGtDQUFrQztJQUNsQyx5REFBeUQ7SUFDekQseURBQXlEO0lBQ3pEQyxLQUFLQyxXQUFXLEdBQUc7SUFFbkIsZUFBZTtJQUNmRCxLQUFLRSxHQUFHLEdBQUdDO0lBRVgsZUFBZTtJQUNmSCxLQUFLSSxXQUFXLEdBQUc7UUFDakJWLE1BQU07UUFDTkMsU0FBUztJQUNYO0lBRUEsZ0JBQWdCO0lBQ2hCSyxLQUFLSyxJQUFJLEdBQUcsU0FBU0wsSUFBSTtRQUN2QixJQUFJLE9BQU9BLFNBQVMsVUFBVTtZQUM1QixPQUFPLHlFQUF5RUssSUFBSSxDQUFDTDtRQUN2RjtRQUNBLE9BQU87SUFDVDtJQUVBLHlCQUF5QjtJQUN6QixJQUFJTTtJQUNKLElBQUksT0FBT0MsV0FBVyxhQUFhO1FBQ2pDRCxTQUFTQztJQUNYLE9BQU8sSUFBSSxLQUErRCxFQUFjLEVBRXZGO0lBRUQsSUFBSSxJQUF1RCxFQUFhO1FBQ3RFRCxTQUFTQSxVQUFVSyxtQkFBT0EsQ0FBQztRQUMzQkQsT0FBT0UsT0FBTyxHQUFHWjtJQUNuQixPQUFPLEVBRU47SUFFRCwwQkFBMEI7SUFDMUIsMkNBQTJDO0lBQzNDQSxLQUFLYSxXQUFXLEdBQUc7UUFDakIsSUFBSVAsUUFBUTtZQUNWLElBQUlBLE9BQU9PLFdBQVcsRUFBRTtnQkFDdEIsT0FBT1AsT0FBT08sV0FBVztZQUMzQjtZQUNBLElBQUlQLE9BQU9RLGVBQWUsRUFBRTtnQkFDMUIsSUFBSSxPQUFPQyxXQUFXQyxTQUFTLENBQUNDLEtBQUssS0FBSyxZQUFZO29CQUNwRCxPQUFPLFNBQVNDLENBQUM7d0JBQ2YsSUFBSUMsUUFBUSxJQUFJSixXQUFXRzt3QkFDM0JaLE9BQU9RLGVBQWUsQ0FBQ0s7d0JBQ3ZCLE9BQU9DLE1BQU1DLElBQUksQ0FBQ0Y7b0JBQ3BCO2dCQUNGO2dCQUNBLE9BQU8sU0FBU0QsQ0FBQztvQkFDZixJQUFJQyxRQUFRLElBQUlKLFdBQVdHO29CQUMzQlosT0FBT1EsZUFBZSxDQUFDSztvQkFDdkIsT0FBT0E7Z0JBQ1Q7WUFDRjtRQUNGO1FBQ0EsT0FBTyxTQUFTRCxDQUFDO1lBQ2YsSUFBSXJCLEdBQUd5QixJQUFJLEVBQUU7WUFDYixJQUFLekIsSUFBSSxHQUFHQSxJQUFJcUIsR0FBR3JCLElBQUs7Z0JBQ3RCeUIsRUFBRUMsSUFBSSxDQUFDQyxLQUFLQyxLQUFLLENBQUNELEtBQUtFLE1BQU0sS0FBSztZQUNwQztZQUNBLE9BQU9KO1FBQ1Q7SUFDRjtJQUVBLHFDQUFxQztJQUNyQyxTQUFTSyxvQkFBb0JULENBQUM7UUFDNUIsSUFBSSxDQUFDeEIsT0FBUSxTQUFVd0IsSUFBS2xCLEtBQUtDLFdBQVcsRUFBRztZQUM3Q04sU0FBUztZQUNURCxNQUFNTSxLQUFLYSxXQUFXLENBQUNiLEtBQUtDLFdBQVc7UUFDekM7UUFDQSxPQUFPUCxJQUFJdUIsS0FBSyxDQUFDdEIsUUFBUUEsVUFBVXVCO0lBQ3JDO0lBRUEsV0FBVztJQUNYLFNBQVNmO1FBQ1AsSUFBSXlCLElBQUlELG9CQUFvQjtRQUM1QkMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFFLENBQUMsRUFBRSxHQUFHLE9BQVE7UUFDdkJBLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBRSxDQUFDLEVBQUUsR0FBRyxPQUFRO1FBQ3ZCLE9BQU9BO0lBQ1Q7SUFFQSx5QkFBeUI7SUFDekIsU0FBUzVCO1FBQ1AsSUFBSTRCLElBQUl6QjtRQUNSLE9BQU9QLFFBQVEsQ0FBQ2dDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBR2hDLFFBQVEsQ0FBQ2dDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FDcENoQyxRQUFRLENBQUNnQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUdoQyxRQUFRLENBQUNnQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFDbENoQyxRQUFRLENBQUNnQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUdoQyxRQUFRLENBQUNnQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFDbENoQyxRQUFRLENBQUNnQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUdoQyxRQUFRLENBQUNnQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFDbENoQyxRQUFRLENBQUNnQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUdoQyxRQUFRLENBQUNnQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFDbENoQyxRQUFRLENBQUNnQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUdoQyxRQUFRLENBQUNnQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQ2pDaEMsUUFBUSxDQUFDZ0MsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHaEMsUUFBUSxDQUFDZ0MsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUNqQ2hDLFFBQVEsQ0FBQ2dDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBR2hDLFFBQVEsQ0FBQ2dDLENBQUMsQ0FBQyxHQUFHLENBQUM7SUFFckM7QUFFRiIsInNvdXJjZXMiOlsid2VicGFjazovL21sYi1haXBob3RvLy4vbm9kZV9tb2R1bGVzL3V1aWQtcmFuZG9tL2luZGV4LmpzP2RmNTAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbihmdW5jdGlvbigpe1xuXG4gIHZhclxuICAgIGJ1ZixcbiAgICBidWZJZHggPSAwLFxuICAgIGhleEJ5dGVzID0gW10sXG4gICAgaVxuICA7XG5cbiAgLy8gUHJlLWNhbGN1bGF0ZSB0b1N0cmluZygxNikgZm9yIHNwZWVkXG4gIGZvciAoaSA9IDA7IGkgPCAyNTY7IGkrKykge1xuICAgIGhleEJ5dGVzW2ldID0gKGkgKyAweDEwMCkudG9TdHJpbmcoMTYpLnN1YnN0cigxKTtcbiAgfVxuXG4gIC8vIEJ1ZmZlciByYW5kb20gbnVtYmVycyBmb3Igc3BlZWRcbiAgLy8gUmVkdWNlIG1lbW9yeSB1c2FnZSBieSBkZWNyZWFzaW5nIHRoaXMgbnVtYmVyIChtaW4gMTYpXG4gIC8vIG9yIGltcHJvdmUgc3BlZWQgYnkgaW5jcmVhc2luZyB0aGlzIG51bWJlciAodHJ5IDE2Mzg0KVxuICB1dWlkLkJVRkZFUl9TSVpFID0gNDA5NjtcblxuICAvLyBCaW5hcnkgdXVpZHNcbiAgdXVpZC5iaW4gPSB1dWlkQmluO1xuXG4gIC8vIENsZWFyIGJ1ZmZlclxuICB1dWlkLmNsZWFyQnVmZmVyID0gZnVuY3Rpb24oKSB7XG4gICAgYnVmID0gbnVsbDtcbiAgICBidWZJZHggPSAwO1xuICB9O1xuXG4gIC8vIFRlc3QgZm9yIHV1aWRcbiAgdXVpZC50ZXN0ID0gZnVuY3Rpb24odXVpZCkge1xuICAgIGlmICh0eXBlb2YgdXVpZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiAvXlswLTlhLWZdezh9LVswLTlhLWZdezR9LTRbMC05YS1mXXszfS1bODlhYl1bMC05YS1mXXszfS1bMC05YS1mXXsxMn0kL2kudGVzdCh1dWlkKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIC8vIE5vZGUgJiBCcm93c2VyIHN1cHBvcnRcbiAgdmFyIGNyeXB0MDtcbiAgaWYgKHR5cGVvZiBjcnlwdG8gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgY3J5cHQwID0gY3J5cHRvO1xuICB9IGVsc2UgaWYoICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykgJiYgKHR5cGVvZiB3aW5kb3cubXNDcnlwdG8gIT09ICd1bmRlZmluZWQnKSkge1xuICAgIGNyeXB0MCA9IHdpbmRvdy5tc0NyeXB0bzsgLy8gSUUxMVxuICB9XG5cbiAgaWYgKCh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykgJiYgKHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nKSkge1xuICAgIGNyeXB0MCA9IGNyeXB0MCB8fCByZXF1aXJlKCdjcnlwdG8nKTtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHV1aWQ7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB3aW5kb3cudXVpZCA9IHV1aWQ7XG4gIH1cblxuICAvLyBVc2UgYmVzdCBhdmFpbGFibGUgUFJOR1xuICAvLyBBbHNvIGV4cG9zZSB0aGlzIHNvIHlvdSBjYW4gb3ZlcnJpZGUgaXQuXG4gIHV1aWQucmFuZG9tQnl0ZXMgPSAoZnVuY3Rpb24oKXtcbiAgICBpZiAoY3J5cHQwKSB7XG4gICAgICBpZiAoY3J5cHQwLnJhbmRvbUJ5dGVzKSB7XG4gICAgICAgIHJldHVybiBjcnlwdDAucmFuZG9tQnl0ZXM7XG4gICAgICB9XG4gICAgICBpZiAoY3J5cHQwLmdldFJhbmRvbVZhbHVlcykge1xuICAgICAgICBpZiAodHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNsaWNlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgIHZhciBieXRlcyA9IG5ldyBVaW50OEFycmF5KG4pO1xuICAgICAgICAgICAgY3J5cHQwLmdldFJhbmRvbVZhbHVlcyhieXRlcyk7XG4gICAgICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShieXRlcyk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24obikge1xuICAgICAgICAgIHZhciBieXRlcyA9IG5ldyBVaW50OEFycmF5KG4pO1xuICAgICAgICAgIGNyeXB0MC5nZXRSYW5kb21WYWx1ZXMoYnl0ZXMpO1xuICAgICAgICAgIHJldHVybiBieXRlcztcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG4pIHtcbiAgICAgIHZhciBpLCByID0gW107XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIHIucHVzaChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyNTYpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByO1xuICAgIH07XG4gIH0pKCk7XG5cbiAgLy8gQnVmZmVyIHNvbWUgcmFuZG9tIGJ5dGVzIGZvciBzcGVlZFxuICBmdW5jdGlvbiByYW5kb21CeXRlc0J1ZmZlcmVkKG4pIHtcbiAgICBpZiAoIWJ1ZiB8fCAoKGJ1ZklkeCArIG4pID4gdXVpZC5CVUZGRVJfU0laRSkpIHtcbiAgICAgIGJ1ZklkeCA9IDA7XG4gICAgICBidWYgPSB1dWlkLnJhbmRvbUJ5dGVzKHV1aWQuQlVGRkVSX1NJWkUpO1xuICAgIH1cbiAgICByZXR1cm4gYnVmLnNsaWNlKGJ1ZklkeCwgYnVmSWR4ICs9IG4pO1xuICB9XG5cbiAgLy8gdXVpZC5iaW5cbiAgZnVuY3Rpb24gdXVpZEJpbigpIHtcbiAgICB2YXIgYiA9IHJhbmRvbUJ5dGVzQnVmZmVyZWQoMTYpO1xuICAgIGJbNl0gPSAoYls2XSAmIDB4MGYpIHwgMHg0MDtcbiAgICBiWzhdID0gKGJbOF0gJiAweDNmKSB8IDB4ODA7XG4gICAgcmV0dXJuIGI7XG4gIH1cblxuICAvLyBTdHJpbmcgVVVJRHY0IChSYW5kb20pXG4gIGZ1bmN0aW9uIHV1aWQoKSB7XG4gICAgdmFyIGIgPSB1dWlkQmluKCk7XG4gICAgcmV0dXJuIGhleEJ5dGVzW2JbMF1dICsgaGV4Qnl0ZXNbYlsxXV0gK1xuICAgICAgaGV4Qnl0ZXNbYlsyXV0gKyBoZXhCeXRlc1tiWzNdXSArICctJyArXG4gICAgICBoZXhCeXRlc1tiWzRdXSArIGhleEJ5dGVzW2JbNV1dICsgJy0nICtcbiAgICAgIGhleEJ5dGVzW2JbNl1dICsgaGV4Qnl0ZXNbYls3XV0gKyAnLScgK1xuICAgICAgaGV4Qnl0ZXNbYls4XV0gKyBoZXhCeXRlc1tiWzldXSArICctJyArXG4gICAgICBoZXhCeXRlc1tiWzEwXV0gKyBoZXhCeXRlc1tiWzExXV0gK1xuICAgICAgaGV4Qnl0ZXNbYlsxMl1dICsgaGV4Qnl0ZXNbYlsxM11dICtcbiAgICAgIGhleEJ5dGVzW2JbMTRdXSArIGhleEJ5dGVzW2JbMTVdXVxuICAgIDtcbiAgfVxuXG59KSgpO1xuIl0sIm5hbWVzIjpbImJ1ZiIsImJ1ZklkeCIsImhleEJ5dGVzIiwiaSIsInRvU3RyaW5nIiwic3Vic3RyIiwidXVpZCIsIkJVRkZFUl9TSVpFIiwiYmluIiwidXVpZEJpbiIsImNsZWFyQnVmZmVyIiwidGVzdCIsImNyeXB0MCIsImNyeXB0byIsIndpbmRvdyIsIm1zQ3J5cHRvIiwibW9kdWxlIiwicmVxdWlyZSIsImV4cG9ydHMiLCJyYW5kb21CeXRlcyIsImdldFJhbmRvbVZhbHVlcyIsIlVpbnQ4QXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsIm4iLCJieXRlcyIsIkFycmF5IiwiZnJvbSIsInIiLCJwdXNoIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwicmFuZG9tQnl0ZXNCdWZmZXJlZCIsImIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uuid-random/index.js\n");

/***/ })

};
;