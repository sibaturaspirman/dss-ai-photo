"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@fal-ai";
exports.ids = ["vendor-chunks/@fal-ai"];
exports.modules = {

/***/ "(ssr)/./node_modules/@fal-ai/serverless-client/src/config.js":
/*!**************************************************************!*\
  !*** ./node_modules/@fal-ai/serverless-client/src/config.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getRestApiUrl = exports.getConfig = exports.config = exports.credentialsFromEnv = void 0;\nconst middleware_1 = __webpack_require__(/*! ./middleware */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/middleware.js\");\nconst response_1 = __webpack_require__(/*! ./response */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/response.js\");\n/**\n * Checks if the required FAL environment variables are set.\n *\n * @returns `true` if the required environment variables are set,\n * `false` otherwise.\n */ function hasEnvVariables() {\n    return typeof process !== \"undefined\" && process.env && (typeof process.env.FAL_KEY !== \"undefined\" || typeof process.env.FAL_KEY_ID !== \"undefined\" && typeof process.env.FAL_KEY_SECRET !== \"undefined\");\n}\nconst credentialsFromEnv = ()=>{\n    if (!hasEnvVariables()) {\n        return undefined;\n    }\n    if (typeof process.env.FAL_KEY !== \"undefined\") {\n        return process.env.FAL_KEY;\n    }\n    return `${process.env.FAL_KEY_ID}:${process.env.FAL_KEY_SECRET}`;\n};\nexports.credentialsFromEnv = credentialsFromEnv;\nconst DEFAULT_CONFIG = {\n    credentials: exports.credentialsFromEnv,\n    requestMiddleware: (request)=>Promise.resolve(request),\n    responseHandler: response_1.defaultResponseHandler\n};\nlet configuration;\n/**\n * Configures the fal serverless client.\n *\n * @param config the new configuration.\n */ function config(config) {\n    configuration = Object.assign(Object.assign({}, DEFAULT_CONFIG), config);\n    if (config.proxyUrl) {\n        configuration = Object.assign(Object.assign({}, configuration), {\n            requestMiddleware: (0, middleware_1.withMiddleware)(configuration.requestMiddleware, (0, middleware_1.withProxy)({\n                targetUrl: config.proxyUrl\n            }))\n        });\n    }\n}\nexports.config = config;\n/**\n * Get the current fal serverless client configuration.\n *\n * @returns the current client configuration.\n */ function getConfig() {\n    if (!configuration) {\n        console.info(\"Using default configuration for the fal client\");\n        return Object.assign({}, DEFAULT_CONFIG);\n    }\n    return configuration;\n}\nexports.getConfig = getConfig;\n/**\n * @returns the URL of the fal serverless rest api endpoint.\n */ function getRestApiUrl() {\n    return \"https://rest.alpha.fal.ai\";\n}\nexports.getRestApiUrl = getRestApiUrl; //# sourceMappingURL=config.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9zZXJ2ZXJsZXNzLWNsaWVudC9zcmMvY29uZmlnLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxxQkFBcUIsR0FBR0EsaUJBQWlCLEdBQUdBLGNBQWMsR0FBR0EsMEJBQTBCLEdBQUcsS0FBSztBQUMvRixNQUFNTSxlQUFlQyxtQkFBT0EsQ0FBQyxzRkFBYztBQUMzQyxNQUFNQyxhQUFhRCxtQkFBT0EsQ0FBQyxrRkFBWTtBQUN2Qzs7Ozs7Q0FLQyxHQUNELFNBQVNFO0lBQ0wsT0FBUSxPQUFPQyxZQUFZLGVBQ3ZCQSxRQUFRQyxHQUFHLElBQ1YsUUFBT0QsUUFBUUMsR0FBRyxDQUFDQyxPQUFPLEtBQUssZUFDM0IsT0FBT0YsUUFBUUMsR0FBRyxDQUFDRSxVQUFVLEtBQUssZUFDL0IsT0FBT0gsUUFBUUMsR0FBRyxDQUFDRyxjQUFjLEtBQUssV0FBVztBQUNqRTtBQUNBLE1BQU1ULHFCQUFxQjtJQUN2QixJQUFJLENBQUNJLG1CQUFtQjtRQUNwQixPQUFPTTtJQUNYO0lBQ0EsSUFBSSxPQUFPTCxRQUFRQyxHQUFHLENBQUNDLE9BQU8sS0FBSyxhQUFhO1FBQzVDLE9BQU9GLFFBQVFDLEdBQUcsQ0FBQ0MsT0FBTztJQUM5QjtJQUNBLE9BQU8sQ0FBQyxFQUFFRixRQUFRQyxHQUFHLENBQUNFLFVBQVUsQ0FBQyxDQUFDLEVBQUVILFFBQVFDLEdBQUcsQ0FBQ0csY0FBYyxDQUFDLENBQUM7QUFDcEU7QUFDQWQsMEJBQTBCLEdBQUdLO0FBQzdCLE1BQU1XLGlCQUFpQjtJQUNuQkMsYUFBYWpCLFFBQVFLLGtCQUFrQjtJQUN2Q2EsbUJBQW1CLENBQUNDLFVBQVlDLFFBQVFDLE9BQU8sQ0FBQ0Y7SUFDaERHLGlCQUFpQmQsV0FBV2Usc0JBQXNCO0FBQ3REO0FBQ0EsSUFBSUM7QUFDSjs7OztDQUlDLEdBQ0QsU0FBU3BCLE9BQU9BLE1BQU07SUFDbEJvQixnQkFBZ0IxQixPQUFPMkIsTUFBTSxDQUFDM0IsT0FBTzJCLE1BQU0sQ0FBQyxDQUFDLEdBQUdULGlCQUFpQlo7SUFDakUsSUFBSUEsT0FBT3NCLFFBQVEsRUFBRTtRQUNqQkYsZ0JBQWdCMUIsT0FBTzJCLE1BQU0sQ0FBQzNCLE9BQU8yQixNQUFNLENBQUMsQ0FBQyxHQUFHRCxnQkFBZ0I7WUFBRU4sbUJBQW1CLENBQUMsR0FBR1osYUFBYXFCLGNBQWMsRUFBRUgsY0FBY04saUJBQWlCLEVBQUUsQ0FBQyxHQUFHWixhQUFhc0IsU0FBUyxFQUFFO2dCQUFFQyxXQUFXekIsT0FBT3NCLFFBQVE7WUFBQztRQUFJO0lBQ3hOO0FBQ0o7QUFDQTFCLGNBQWMsR0FBR0k7QUFDakI7Ozs7Q0FJQyxHQUNELFNBQVNEO0lBQ0wsSUFBSSxDQUFDcUIsZUFBZTtRQUNoQk0sUUFBUUMsSUFBSSxDQUFDO1FBQ2IsT0FBT2pDLE9BQU8yQixNQUFNLENBQUMsQ0FBQyxHQUFHVDtJQUM3QjtJQUNBLE9BQU9RO0FBQ1g7QUFDQXhCLGlCQUFpQixHQUFHRztBQUNwQjs7Q0FFQyxHQUNELFNBQVNEO0lBQ0wsT0FBTztBQUNYO0FBQ0FGLHFCQUFxQixHQUFHRSxlQUN4QixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tbGItYWlwaG90by8uL25vZGVfbW9kdWxlcy9AZmFsLWFpL3NlcnZlcmxlc3MtY2xpZW50L3NyYy9jb25maWcuanM/YTM1MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0UmVzdEFwaVVybCA9IGV4cG9ydHMuZ2V0Q29uZmlnID0gZXhwb3J0cy5jb25maWcgPSBleHBvcnRzLmNyZWRlbnRpYWxzRnJvbUVudiA9IHZvaWQgMDtcbmNvbnN0IG1pZGRsZXdhcmVfMSA9IHJlcXVpcmUoXCIuL21pZGRsZXdhcmVcIik7XG5jb25zdCByZXNwb25zZV8xID0gcmVxdWlyZShcIi4vcmVzcG9uc2VcIik7XG4vKipcbiAqIENoZWNrcyBpZiB0aGUgcmVxdWlyZWQgRkFMIGVudmlyb25tZW50IHZhcmlhYmxlcyBhcmUgc2V0LlxuICpcbiAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgcmVxdWlyZWQgZW52aXJvbm1lbnQgdmFyaWFibGVzIGFyZSBzZXQsXG4gKiBgZmFsc2VgIG90aGVyd2lzZS5cbiAqL1xuZnVuY3Rpb24gaGFzRW52VmFyaWFibGVzKCkge1xuICAgIHJldHVybiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIHByb2Nlc3MuZW52ICYmXG4gICAgICAgICh0eXBlb2YgcHJvY2Vzcy5lbnYuRkFMX0tFWSAhPT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAgICAgICAgICh0eXBlb2YgcHJvY2Vzcy5lbnYuRkFMX0tFWV9JRCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgcHJvY2Vzcy5lbnYuRkFMX0tFWV9TRUNSRVQgIT09ICd1bmRlZmluZWQnKSkpO1xufVxuY29uc3QgY3JlZGVudGlhbHNGcm9tRW52ID0gKCkgPT4ge1xuICAgIGlmICghaGFzRW52VmFyaWFibGVzKCkpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwcm9jZXNzLmVudi5GQUxfS0VZICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gcHJvY2Vzcy5lbnYuRkFMX0tFWTtcbiAgICB9XG4gICAgcmV0dXJuIGAke3Byb2Nlc3MuZW52LkZBTF9LRVlfSUR9OiR7cHJvY2Vzcy5lbnYuRkFMX0tFWV9TRUNSRVR9YDtcbn07XG5leHBvcnRzLmNyZWRlbnRpYWxzRnJvbUVudiA9IGNyZWRlbnRpYWxzRnJvbUVudjtcbmNvbnN0IERFRkFVTFRfQ09ORklHID0ge1xuICAgIGNyZWRlbnRpYWxzOiBleHBvcnRzLmNyZWRlbnRpYWxzRnJvbUVudixcbiAgICByZXF1ZXN0TWlkZGxld2FyZTogKHJlcXVlc3QpID0+IFByb21pc2UucmVzb2x2ZShyZXF1ZXN0KSxcbiAgICByZXNwb25zZUhhbmRsZXI6IHJlc3BvbnNlXzEuZGVmYXVsdFJlc3BvbnNlSGFuZGxlcixcbn07XG5sZXQgY29uZmlndXJhdGlvbjtcbi8qKlxuICogQ29uZmlndXJlcyB0aGUgZmFsIHNlcnZlcmxlc3MgY2xpZW50LlxuICpcbiAqIEBwYXJhbSBjb25maWcgdGhlIG5ldyBjb25maWd1cmF0aW9uLlxuICovXG5mdW5jdGlvbiBjb25maWcoY29uZmlnKSB7XG4gICAgY29uZmlndXJhdGlvbiA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9DT05GSUcpLCBjb25maWcpO1xuICAgIGlmIChjb25maWcucHJveHlVcmwpIHtcbiAgICAgICAgY29uZmlndXJhdGlvbiA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgY29uZmlndXJhdGlvbiksIHsgcmVxdWVzdE1pZGRsZXdhcmU6ICgwLCBtaWRkbGV3YXJlXzEud2l0aE1pZGRsZXdhcmUpKGNvbmZpZ3VyYXRpb24ucmVxdWVzdE1pZGRsZXdhcmUsICgwLCBtaWRkbGV3YXJlXzEud2l0aFByb3h5KSh7IHRhcmdldFVybDogY29uZmlnLnByb3h5VXJsIH0pKSB9KTtcbiAgICB9XG59XG5leHBvcnRzLmNvbmZpZyA9IGNvbmZpZztcbi8qKlxuICogR2V0IHRoZSBjdXJyZW50IGZhbCBzZXJ2ZXJsZXNzIGNsaWVudCBjb25maWd1cmF0aW9uLlxuICpcbiAqIEByZXR1cm5zIHRoZSBjdXJyZW50IGNsaWVudCBjb25maWd1cmF0aW9uLlxuICovXG5mdW5jdGlvbiBnZXRDb25maWcoKSB7XG4gICAgaWYgKCFjb25maWd1cmF0aW9uKSB7XG4gICAgICAgIGNvbnNvbGUuaW5mbygnVXNpbmcgZGVmYXVsdCBjb25maWd1cmF0aW9uIGZvciB0aGUgZmFsIGNsaWVudCcpO1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9DT05GSUcpO1xuICAgIH1cbiAgICByZXR1cm4gY29uZmlndXJhdGlvbjtcbn1cbmV4cG9ydHMuZ2V0Q29uZmlnID0gZ2V0Q29uZmlnO1xuLyoqXG4gKiBAcmV0dXJucyB0aGUgVVJMIG9mIHRoZSBmYWwgc2VydmVybGVzcyByZXN0IGFwaSBlbmRwb2ludC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmVzdEFwaVVybCgpIHtcbiAgICByZXR1cm4gJ2h0dHBzOi8vcmVzdC5hbHBoYS5mYWwuYWknO1xufVxuZXhwb3J0cy5nZXRSZXN0QXBpVXJsID0gZ2V0UmVzdEFwaVVybDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmZpZy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJnZXRSZXN0QXBpVXJsIiwiZ2V0Q29uZmlnIiwiY29uZmlnIiwiY3JlZGVudGlhbHNGcm9tRW52IiwibWlkZGxld2FyZV8xIiwicmVxdWlyZSIsInJlc3BvbnNlXzEiLCJoYXNFbnZWYXJpYWJsZXMiLCJwcm9jZXNzIiwiZW52IiwiRkFMX0tFWSIsIkZBTF9LRVlfSUQiLCJGQUxfS0VZX1NFQ1JFVCIsInVuZGVmaW5lZCIsIkRFRkFVTFRfQ09ORklHIiwiY3JlZGVudGlhbHMiLCJyZXF1ZXN0TWlkZGxld2FyZSIsInJlcXVlc3QiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlc3BvbnNlSGFuZGxlciIsImRlZmF1bHRSZXNwb25zZUhhbmRsZXIiLCJjb25maWd1cmF0aW9uIiwiYXNzaWduIiwicHJveHlVcmwiLCJ3aXRoTWlkZGxld2FyZSIsIndpdGhQcm94eSIsInRhcmdldFVybCIsImNvbnNvbGUiLCJpbmZvIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fal-ai/serverless-client/src/config.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fal-ai/serverless-client/src/function.js":
/*!****************************************************************!*\
  !*** ./node_modules/@fal-ai/serverless-client/src/function.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __awaiter = (void 0) && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __rest = (void 0) && (void 0).__rest || function(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.queue = exports.subscribe = exports.run = exports.send = exports.buildUrl = void 0;\nconst request_1 = __webpack_require__(/*! ./request */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/request.js\");\nconst storage_1 = __webpack_require__(/*! ./storage */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/storage.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/utils.js\");\n/**\n * Builds the final url to run the function based on its `id` or alias and\n * a the options from `RunOptions<Input>`.\n *\n * @private\n * @param id the function id or alias\n * @param options the run options\n * @returns the final url to run the function\n */ function buildUrl(id, options = {}) {\n    var _a, _b;\n    const method = ((_a = options.method) !== null && _a !== void 0 ? _a : \"post\").toLowerCase();\n    const path = ((_b = options.path) !== null && _b !== void 0 ? _b : \"\").replace(/^\\//, \"\").replace(/\\/{2,}/, \"/\");\n    const input = options.input;\n    const params = // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    method === \"get\" && input ? new URLSearchParams(input) : undefined;\n    const queryParams = params ? `?${params.toString()}` : \"\";\n    const parts = id.split(\"/\");\n    // if a fal url is passed, just use it\n    if ((0, utils_1.isValidUrl)(id)) {\n        const url = id.endsWith(\"/\") ? id : `${id}/`;\n        return `${url}${path}${queryParams}`;\n    }\n    // TODO remove this after some time, fal.run should be preferred\n    if (parts.length === 2 && (0, utils_1.isUUIDv4)(parts[1])) {\n        const host = \"gateway.shark.fal.ai\";\n        return `https://${host}/trigger/${id}/${path}${queryParams}`;\n    }\n    const appId = (0, utils_1.ensureAppIdFormat)(id);\n    const subdomain = options.subdomain ? `${options.subdomain}.` : \"\";\n    const url = `https://${subdomain}fal.run/${appId}/${path}`;\n    return `${url.replace(/\\/$/, \"\")}${queryParams}`;\n}\nexports.buildUrl = buildUrl;\nfunction send(id, options = {}) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function*() {\n        const input = options.input && options.autoUpload !== false ? yield storage_1.storageImpl.transformInput(options.input) : options.input;\n        return (0, request_1.dispatchRequest)((_a = options.method) !== null && _a !== void 0 ? _a : \"post\", buildUrl(id, options), input);\n    });\n}\nexports.send = send;\n/**\n * Runs a fal serverless function identified by its `id`.\n *\n * @param id the registered function revision id or alias.\n * @returns the remote function output\n */ function run(id, options = {}) {\n    return __awaiter(this, void 0, void 0, function*() {\n        return send(id, options);\n    });\n}\nexports.run = run;\n/**\n * Subscribes to updates for a specific request in the queue.\n *\n * @param id - The ID or URL of the function web endpoint.\n * @param options - Options to configure how the request is run and how updates are received.\n * @returns A promise that resolves to the result of the request once it's completed.\n */ function subscribe(id, options = {}) {\n    return __awaiter(this, void 0, void 0, function*() {\n        const { request_id: requestId } = yield exports.queue.submit(id, options);\n        if (options.onEnqueue) {\n            options.onEnqueue(requestId);\n        }\n        return new Promise((resolve, reject)=>{\n            var _a;\n            let timeoutId;\n            const pollInterval = (_a = options.pollInterval) !== null && _a !== void 0 ? _a : 1000;\n            const poll = ()=>__awaiter(this, void 0, void 0, function*() {\n                    var _b;\n                    try {\n                        const requestStatus = yield exports.queue.status(id, {\n                            requestId,\n                            logs: (_b = options.logs) !== null && _b !== void 0 ? _b : false\n                        });\n                        if (options.onQueueUpdate) {\n                            options.onQueueUpdate(requestStatus);\n                        }\n                        if (requestStatus.status === \"COMPLETED\") {\n                            clearTimeout(timeoutId);\n                            try {\n                                const result = yield exports.queue.result(id, {\n                                    requestId\n                                });\n                                resolve(result);\n                            } catch (error) {\n                                reject(error);\n                            }\n                            return;\n                        }\n                        timeoutId = setTimeout(poll, pollInterval);\n                    } catch (error) {\n                        clearTimeout(timeoutId);\n                        reject(error);\n                    }\n                });\n            poll().catch(reject);\n        });\n    });\n}\nexports.subscribe = subscribe;\n/**\n * The fal run queue module. It allows to submit a function to the queue and get its result\n * on a separate call. This is useful for long running functions that can be executed\n * asynchronously and not .\n */ exports.queue = {\n    submit (id, options) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const { webhookUrl, path = \"\" } = options, runOptions = __rest(options, [\n                \"webhookUrl\",\n                \"path\"\n            ]);\n            const query = webhookUrl ? \"?\" + new URLSearchParams({\n                fal_webhook: webhookUrl\n            }).toString() : \"\";\n            return send(id, Object.assign(Object.assign({}, runOptions), {\n                subdomain: \"queue\",\n                method: \"post\",\n                path: path + query\n            }));\n        });\n    },\n    status (id, { requestId, logs = false }) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const [appOwner, appAlias] = (0, utils_1.ensureAppIdFormat)(id).split(\"/\");\n            return send(`${appOwner}/${appAlias}`, {\n                subdomain: \"queue\",\n                method: \"get\",\n                path: `/requests/${requestId}/status`,\n                input: {\n                    logs: logs ? \"1\" : \"0\"\n                }\n            });\n        });\n    },\n    result (id, { requestId }) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const [appOwner, appAlias] = (0, utils_1.ensureAppIdFormat)(id).split(\"/\");\n            return send(`${appOwner}/${appAlias}`, {\n                subdomain: \"queue\",\n                method: \"get\",\n                path: `/requests/${requestId}`\n            });\n        });\n    },\n    subscribe\n}; //# sourceMappingURL=function.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fal-ai/serverless-client/src/function.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fal-ai/serverless-client/src/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@fal-ai/serverless-client/src/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.storage = exports.ValidationError = exports.ApiError = exports.realtime = exports.withProxy = exports.withMiddleware = exports.subscribe = exports.run = exports.queue = exports.getConfig = exports.config = void 0;\nvar config_1 = __webpack_require__(/*! ./config */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/config.js\");\nObject.defineProperty(exports, \"config\", ({\n    enumerable: true,\n    get: function() {\n        return config_1.config;\n    }\n}));\nObject.defineProperty(exports, \"getConfig\", ({\n    enumerable: true,\n    get: function() {\n        return config_1.getConfig;\n    }\n}));\nvar function_1 = __webpack_require__(/*! ./function */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/function.js\");\nObject.defineProperty(exports, \"queue\", ({\n    enumerable: true,\n    get: function() {\n        return function_1.queue;\n    }\n}));\nObject.defineProperty(exports, \"run\", ({\n    enumerable: true,\n    get: function() {\n        return function_1.run;\n    }\n}));\nObject.defineProperty(exports, \"subscribe\", ({\n    enumerable: true,\n    get: function() {\n        return function_1.subscribe;\n    }\n}));\nvar middleware_1 = __webpack_require__(/*! ./middleware */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/middleware.js\");\nObject.defineProperty(exports, \"withMiddleware\", ({\n    enumerable: true,\n    get: function() {\n        return middleware_1.withMiddleware;\n    }\n}));\nObject.defineProperty(exports, \"withProxy\", ({\n    enumerable: true,\n    get: function() {\n        return middleware_1.withProxy;\n    }\n}));\nvar realtime_1 = __webpack_require__(/*! ./realtime */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/realtime.js\");\nObject.defineProperty(exports, \"realtime\", ({\n    enumerable: true,\n    get: function() {\n        return realtime_1.realtimeImpl;\n    }\n}));\nvar response_1 = __webpack_require__(/*! ./response */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/response.js\");\nObject.defineProperty(exports, \"ApiError\", ({\n    enumerable: true,\n    get: function() {\n        return response_1.ApiError;\n    }\n}));\nObject.defineProperty(exports, \"ValidationError\", ({\n    enumerable: true,\n    get: function() {\n        return response_1.ValidationError;\n    }\n}));\nvar storage_1 = __webpack_require__(/*! ./storage */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/storage.js\");\nObject.defineProperty(exports, \"storage\", ({\n    enumerable: true,\n    get: function() {\n        return storage_1.storageImpl;\n    }\n})); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9zZXJ2ZXJsZXNzLWNsaWVudC9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGVBQWUsR0FBR0EsdUJBQXVCLEdBQUdBLGdCQUFnQixHQUFHQSxnQkFBZ0IsR0FBR0EsaUJBQWlCLEdBQUdBLHNCQUFzQixHQUFHQSxpQkFBaUIsR0FBR0EsV0FBVyxHQUFHQSxhQUFhLEdBQUdBLGlCQUFpQixHQUFHQSxjQUFjLEdBQUcsS0FBSztBQUMzTixJQUFJYSxXQUFXQyxtQkFBT0EsQ0FBQyw4RUFBVTtBQUNqQ2hCLDBDQUF5QztJQUFFaUIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0gsU0FBU0QsTUFBTTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzVHZCw2Q0FBNEM7SUFBRWlCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9ILFNBQVNGLFNBQVM7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNsSCxJQUFJTSxhQUFhSCxtQkFBT0EsQ0FBQyxrRkFBWTtBQUNyQ2hCLHlDQUF3QztJQUFFaUIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0MsV0FBV1AsS0FBSztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzVHWix1Q0FBc0M7SUFBRWlCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9DLFdBQVdSLEdBQUc7SUFBRTtBQUFFLENBQUMsRUFBQztBQUN4R1gsNkNBQTRDO0lBQUVpQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPQyxXQUFXVCxTQUFTO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDcEgsSUFBSVUsZUFBZUosbUJBQU9BLENBQUMsc0ZBQWM7QUFDekNoQixrREFBaUQ7SUFBRWlCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9FLGFBQWFYLGNBQWM7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNoSVQsNkNBQTRDO0lBQUVpQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRSxhQUFhWixTQUFTO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDdEgsSUFBSWEsYUFBYUwsbUJBQU9BLENBQUMsa0ZBQVk7QUFDckNoQiw0Q0FBMkM7SUFBRWlCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9HLFdBQVdDLFlBQVk7SUFBRTtBQUFFLENBQUMsRUFBQztBQUN0SCxJQUFJQyxhQUFhUCxtQkFBT0EsQ0FBQyxrRkFBWTtBQUNyQ2hCLDRDQUEyQztJQUFFaUIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0ssV0FBV2pCLFFBQVE7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNsSE4sbURBQWtEO0lBQUVpQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPSyxXQUFXbEIsZUFBZTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ2hJLElBQUltQixZQUFZUixtQkFBT0EsQ0FBQyxnRkFBVztBQUNuQ2hCLDJDQUEwQztJQUFFaUIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT00sVUFBVUMsV0FBVztJQUFFO0FBQUUsQ0FBQyxFQUFDLEVBQ25ILGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL21sYi1haXBob3RvLy4vbm9kZV9tb2R1bGVzL0BmYWwtYWkvc2VydmVybGVzcy1jbGllbnQvc3JjL2luZGV4LmpzP2E1YmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnN0b3JhZ2UgPSBleHBvcnRzLlZhbGlkYXRpb25FcnJvciA9IGV4cG9ydHMuQXBpRXJyb3IgPSBleHBvcnRzLnJlYWx0aW1lID0gZXhwb3J0cy53aXRoUHJveHkgPSBleHBvcnRzLndpdGhNaWRkbGV3YXJlID0gZXhwb3J0cy5zdWJzY3JpYmUgPSBleHBvcnRzLnJ1biA9IGV4cG9ydHMucXVldWUgPSBleHBvcnRzLmdldENvbmZpZyA9IGV4cG9ydHMuY29uZmlnID0gdm9pZCAwO1xudmFyIGNvbmZpZ18xID0gcmVxdWlyZShcIi4vY29uZmlnXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY29uZmlnXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25maWdfMS5jb25maWc7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXRDb25maWdcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbmZpZ18xLmdldENvbmZpZzsgfSB9KTtcbnZhciBmdW5jdGlvbl8xID0gcmVxdWlyZShcIi4vZnVuY3Rpb25cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJxdWV1ZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb25fMS5xdWV1ZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInJ1blwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb25fMS5ydW47IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzdWJzY3JpYmVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uXzEuc3Vic2NyaWJlOyB9IH0pO1xudmFyIG1pZGRsZXdhcmVfMSA9IHJlcXVpcmUoXCIuL21pZGRsZXdhcmVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ3aXRoTWlkZGxld2FyZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWlkZGxld2FyZV8xLndpdGhNaWRkbGV3YXJlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwid2l0aFByb3h5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtaWRkbGV3YXJlXzEud2l0aFByb3h5OyB9IH0pO1xudmFyIHJlYWx0aW1lXzEgPSByZXF1aXJlKFwiLi9yZWFsdGltZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInJlYWx0aW1lXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiByZWFsdGltZV8xLnJlYWx0aW1lSW1wbDsgfSB9KTtcbnZhciByZXNwb25zZV8xID0gcmVxdWlyZShcIi4vcmVzcG9uc2VcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBcGlFcnJvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzcG9uc2VfMS5BcGlFcnJvcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlZhbGlkYXRpb25FcnJvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzcG9uc2VfMS5WYWxpZGF0aW9uRXJyb3I7IH0gfSk7XG52YXIgc3RvcmFnZV8xID0gcmVxdWlyZShcIi4vc3RvcmFnZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInN0b3JhZ2VcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN0b3JhZ2VfMS5zdG9yYWdlSW1wbDsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInN0b3JhZ2UiLCJWYWxpZGF0aW9uRXJyb3IiLCJBcGlFcnJvciIsInJlYWx0aW1lIiwid2l0aFByb3h5Iiwid2l0aE1pZGRsZXdhcmUiLCJzdWJzY3JpYmUiLCJydW4iLCJxdWV1ZSIsImdldENvbmZpZyIsImNvbmZpZyIsImNvbmZpZ18xIiwicmVxdWlyZSIsImVudW1lcmFibGUiLCJnZXQiLCJmdW5jdGlvbl8xIiwibWlkZGxld2FyZV8xIiwicmVhbHRpbWVfMSIsInJlYWx0aW1lSW1wbCIsInJlc3BvbnNlXzEiLCJzdG9yYWdlXzEiLCJzdG9yYWdlSW1wbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fal-ai/serverless-client/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fal-ai/serverless-client/src/middleware.js":
/*!******************************************************************!*\
  !*** ./node_modules/@fal-ai/serverless-client/src/middleware.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.withProxy = exports.TARGET_URL_HEADER = exports.withMiddleware = void 0;\n/**\n * Setup a execution chain of middleware functions.\n *\n * @param middlewares one or more middleware functions.\n * @returns a middleware function that executes the given middlewares in order.\n */ function withMiddleware(...middlewares) {\n    return (config)=>middlewares.reduce((configPromise, middleware)=>configPromise.then((req)=>middleware(req)), Promise.resolve(config));\n}\nexports.withMiddleware = withMiddleware;\nexports.TARGET_URL_HEADER = \"x-fal-target-url\";\nfunction withProxy(config) {\n    // when running on the server, we don't need to proxy the request\n    if (true) {\n        return (requestConfig)=>Promise.resolve(requestConfig);\n    }\n    return (requestConfig)=>Promise.resolve(Object.assign(Object.assign({}, requestConfig), {\n            url: config.targetUrl,\n            headers: Object.assign(Object.assign({}, requestConfig.headers || {}), {\n                [exports.TARGET_URL_HEADER]: requestConfig.url\n            })\n        }));\n}\nexports.withProxy = withProxy; //# sourceMappingURL=middleware.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9zZXJ2ZXJsZXNzLWNsaWVudC9zcmMvbWlkZGxld2FyZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsaUJBQWlCLEdBQUdBLHlCQUF5QixHQUFHQSxzQkFBc0IsR0FBRyxLQUFLO0FBQzlFOzs7OztDQUtDLEdBQ0QsU0FBU0ksZUFBZSxHQUFHQyxXQUFXO0lBQ2xDLE9BQU8sQ0FBQ0MsU0FBV0QsWUFBWUUsTUFBTSxDQUFDLENBQUNDLGVBQWVDLGFBQWVELGNBQWNFLElBQUksQ0FBQyxDQUFDQyxNQUFRRixXQUFXRSxPQUFPQyxRQUFRQyxPQUFPLENBQUNQO0FBQ3ZJO0FBQ0FOLHNCQUFzQixHQUFHSTtBQUN6QkoseUJBQXlCLEdBQUc7QUFDNUIsU0FBU0UsVUFBVUksTUFBTTtJQUNyQixpRUFBaUU7SUFDakUsSUFBSSxJQUFrQixFQUFhO1FBQy9CLE9BQU8sQ0FBQ1EsZ0JBQWtCRixRQUFRQyxPQUFPLENBQUNDO0lBQzlDO0lBQ0EsT0FBTyxDQUFDQSxnQkFBa0JGLFFBQVFDLE9BQU8sQ0FBQ2YsT0FBT2lCLE1BQU0sQ0FBQ2pCLE9BQU9pQixNQUFNLENBQUMsQ0FBQyxHQUFHRCxnQkFBZ0I7WUFBRUUsS0FBS1YsT0FBT1csU0FBUztZQUFFQyxTQUFTcEIsT0FBT2lCLE1BQU0sQ0FBQ2pCLE9BQU9pQixNQUFNLENBQUMsQ0FBQyxHQUFJRCxjQUFjSSxPQUFPLElBQUksQ0FBQyxJQUFLO2dCQUFFLENBQUNsQixRQUFRRyxpQkFBaUIsQ0FBQyxFQUFFVyxjQUFjRSxHQUFHO1lBQUM7UUFBRztBQUNwUDtBQUNBaEIsaUJBQWlCLEdBQUdFLFdBQ3BCLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL21sYi1haXBob3RvLy4vbm9kZV9tb2R1bGVzL0BmYWwtYWkvc2VydmVybGVzcy1jbGllbnQvc3JjL21pZGRsZXdhcmUuanM/ZjczMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMud2l0aFByb3h5ID0gZXhwb3J0cy5UQVJHRVRfVVJMX0hFQURFUiA9IGV4cG9ydHMud2l0aE1pZGRsZXdhcmUgPSB2b2lkIDA7XG4vKipcbiAqIFNldHVwIGEgZXhlY3V0aW9uIGNoYWluIG9mIG1pZGRsZXdhcmUgZnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSBtaWRkbGV3YXJlcyBvbmUgb3IgbW9yZSBtaWRkbGV3YXJlIGZ1bmN0aW9ucy5cbiAqIEByZXR1cm5zIGEgbWlkZGxld2FyZSBmdW5jdGlvbiB0aGF0IGV4ZWN1dGVzIHRoZSBnaXZlbiBtaWRkbGV3YXJlcyBpbiBvcmRlci5cbiAqL1xuZnVuY3Rpb24gd2l0aE1pZGRsZXdhcmUoLi4ubWlkZGxld2FyZXMpIHtcbiAgICByZXR1cm4gKGNvbmZpZykgPT4gbWlkZGxld2FyZXMucmVkdWNlKChjb25maWdQcm9taXNlLCBtaWRkbGV3YXJlKSA9PiBjb25maWdQcm9taXNlLnRoZW4oKHJlcSkgPT4gbWlkZGxld2FyZShyZXEpKSwgUHJvbWlzZS5yZXNvbHZlKGNvbmZpZykpO1xufVxuZXhwb3J0cy53aXRoTWlkZGxld2FyZSA9IHdpdGhNaWRkbGV3YXJlO1xuZXhwb3J0cy5UQVJHRVRfVVJMX0hFQURFUiA9ICd4LWZhbC10YXJnZXQtdXJsJztcbmZ1bmN0aW9uIHdpdGhQcm94eShjb25maWcpIHtcbiAgICAvLyB3aGVuIHJ1bm5pbmcgb24gdGhlIHNlcnZlciwgd2UgZG9uJ3QgbmVlZCB0byBwcm94eSB0aGUgcmVxdWVzdFxuICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gKHJlcXVlc3RDb25maWcpID0+IFByb21pc2UucmVzb2x2ZShyZXF1ZXN0Q29uZmlnKTtcbiAgICB9XG4gICAgcmV0dXJuIChyZXF1ZXN0Q29uZmlnKSA9PiBQcm9taXNlLnJlc29sdmUoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXF1ZXN0Q29uZmlnKSwgeyB1cmw6IGNvbmZpZy50YXJnZXRVcmwsIGhlYWRlcnM6IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgKHJlcXVlc3RDb25maWcuaGVhZGVycyB8fCB7fSkpLCB7IFtleHBvcnRzLlRBUkdFVF9VUkxfSEVBREVSXTogcmVxdWVzdENvbmZpZy51cmwgfSkgfSkpO1xufVxuZXhwb3J0cy53aXRoUHJveHkgPSB3aXRoUHJveHk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1taWRkbGV3YXJlLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIndpdGhQcm94eSIsIlRBUkdFVF9VUkxfSEVBREVSIiwid2l0aE1pZGRsZXdhcmUiLCJtaWRkbGV3YXJlcyIsImNvbmZpZyIsInJlZHVjZSIsImNvbmZpZ1Byb21pc2UiLCJtaWRkbGV3YXJlIiwidGhlbiIsInJlcSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVxdWVzdENvbmZpZyIsImFzc2lnbiIsInVybCIsInRhcmdldFVybCIsImhlYWRlcnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fal-ai/serverless-client/src/middleware.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fal-ai/serverless-client/src/realtime.js":
/*!****************************************************************!*\
  !*** ./node_modules/@fal-ai/serverless-client/src/realtime.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __awaiter = (void 0) && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.realtimeImpl = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */ const msgpack_1 = __webpack_require__(/*! @msgpack/msgpack */ \"(ssr)/./node_modules/@msgpack/msgpack/dist.es5+esm/index.mjs\");\nconst robot3_1 = __webpack_require__(/*! robot3 */ \"(ssr)/./node_modules/robot3/dist/machine.js\");\nconst uuid_random_1 = __importDefault(__webpack_require__(/*! uuid-random */ \"(ssr)/./node_modules/uuid-random/index.js\"));\nconst config_1 = __webpack_require__(/*! ./config */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/config.js\");\nconst request_1 = __webpack_require__(/*! ./request */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/request.js\");\nconst response_1 = __webpack_require__(/*! ./response */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/response.js\");\nconst runtime_1 = __webpack_require__(/*! ./runtime */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/runtime.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/utils.js\");\nconst initialState = ()=>({\n        enqueuedMessage: undefined\n    });\nfunction hasToken(context) {\n    return context.token !== undefined;\n}\nfunction noToken(context) {\n    return !hasToken(context);\n}\nfunction enqueueMessage(context, event) {\n    return Object.assign(Object.assign({}, context), {\n        enqueuedMessage: event.message\n    });\n}\nfunction closeConnection(context) {\n    if (context.websocket && context.websocket.readyState === WebSocket.OPEN) {\n        context.websocket.close();\n    }\n    return Object.assign(Object.assign({}, context), {\n        websocket: undefined\n    });\n}\nfunction sendMessage(context, event) {\n    if (context.websocket && context.websocket.readyState === WebSocket.OPEN) {\n        if (event.message instanceof Uint8Array) {\n            context.websocket.send(event.message);\n        } else if (shouldSendBinary(event.message)) {\n            context.websocket.send((0, msgpack_1.encode)(event.message));\n        } else {\n            context.websocket.send(JSON.stringify(event.message));\n        }\n        return Object.assign(Object.assign({}, context), {\n            enqueuedMessage: undefined\n        });\n    }\n    return Object.assign(Object.assign({}, context), {\n        enqueuedMessage: event.message\n    });\n}\nfunction expireToken(context) {\n    return Object.assign(Object.assign({}, context), {\n        token: undefined\n    });\n}\nfunction setToken(context, event) {\n    return Object.assign(Object.assign({}, context), {\n        token: event.token\n    });\n}\nfunction connectionEstablished(context, event) {\n    return Object.assign(Object.assign({}, context), {\n        websocket: event.websocket\n    });\n}\n// State machine\nconst connectionStateMachine = (0, robot3_1.createMachine)(\"idle\", {\n    idle: (0, robot3_1.state)((0, robot3_1.transition)(\"send\", \"connecting\", (0, robot3_1.reduce)(enqueueMessage)), (0, robot3_1.transition)(\"expireToken\", \"idle\", (0, robot3_1.reduce)(expireToken))),\n    connecting: (0, robot3_1.state)((0, robot3_1.transition)(\"connecting\", \"connecting\"), (0, robot3_1.transition)(\"connected\", \"active\", (0, robot3_1.reduce)(connectionEstablished)), (0, robot3_1.transition)(\"connectionClosed\", \"idle\", (0, robot3_1.reduce)(closeConnection)), (0, robot3_1.transition)(\"send\", \"connecting\", (0, robot3_1.reduce)(enqueueMessage)), (0, robot3_1.immediate)(\"authRequired\", (0, robot3_1.guard)(noToken))),\n    authRequired: (0, robot3_1.state)((0, robot3_1.transition)(\"initiateAuth\", \"authInProgress\"), (0, robot3_1.transition)(\"send\", \"authRequired\", (0, robot3_1.reduce)(enqueueMessage))),\n    authInProgress: (0, robot3_1.state)((0, robot3_1.transition)(\"authenticated\", \"connecting\", (0, robot3_1.reduce)(setToken)), (0, robot3_1.transition)(\"unauthorized\", \"idle\", (0, robot3_1.reduce)(expireToken), (0, robot3_1.reduce)(closeConnection)), (0, robot3_1.transition)(\"send\", \"authInProgress\", (0, robot3_1.reduce)(enqueueMessage))),\n    active: (0, robot3_1.state)((0, robot3_1.transition)(\"send\", \"active\", (0, robot3_1.reduce)(sendMessage)), (0, robot3_1.transition)(\"unauthorized\", \"idle\", (0, robot3_1.reduce)(expireToken)), (0, robot3_1.transition)(\"connectionClosed\", \"idle\", (0, robot3_1.reduce)(closeConnection))),\n    failed: (0, robot3_1.state)((0, robot3_1.transition)(\"send\", \"failed\"))\n}, initialState);\n// This is a list of apps deployed before formal realtime support. Their URLs follow\n// a different pattern and will be kept here until we fully sunset them.\nconst LEGACY_APPS = [\n    \"lcm-sd15-i2i\",\n    \"lcm\",\n    \"sdxl-turbo-realtime\",\n    \"sd-turbo-real-time-high-fps-msgpack-a10g\",\n    \"lcm-plexed-sd15-i2i\",\n    \"sd-turbo-real-time-high-fps-msgpack\"\n];\nfunction buildRealtimeUrl(app, { token, maxBuffering }) {\n    if (maxBuffering !== undefined && (maxBuffering < 1 || maxBuffering > 60)) {\n        throw new Error(\"The `maxBuffering` must be between 1 and 60 (inclusive)\");\n    }\n    const queryParams = new URLSearchParams({\n        fal_jwt_token: token\n    });\n    if (maxBuffering !== undefined) {\n        queryParams.set(\"max_buffering\", maxBuffering.toFixed(0));\n    }\n    const appId = (0, utils_1.ensureAppIdFormat)(app);\n    const [, appAlias] = (0, utils_1.ensureAppIdFormat)(app).split(\"/\");\n    const suffix = LEGACY_APPS.includes(appAlias) || !app.includes(\"/\") ? \"ws\" : \"realtime\";\n    return `wss://fal.run/${appId}/${suffix}?${queryParams.toString()}`;\n}\nconst TOKEN_EXPIRATION_SECONDS = 120;\nconst DEFAULT_THROTTLE_INTERVAL = 128;\nfunction shouldSendBinary(message) {\n    return Object.values(message).some((value)=>value instanceof Blob || value instanceof ArrayBuffer || value instanceof Uint8Array);\n}\n/**\n * Get a token to connect to the realtime endpoint.\n */ function getToken(app) {\n    return __awaiter(this, void 0, void 0, function*() {\n        const [, appAlias] = (0, utils_1.ensureAppIdFormat)(app).split(\"/\");\n        const token = yield (0, request_1.dispatchRequest)(\"POST\", `${(0, config_1.getRestApiUrl)()}/tokens/`, {\n            allowed_apps: [\n                appAlias\n            ],\n            token_expiration: TOKEN_EXPIRATION_SECONDS\n        });\n        // keep this in case the response was wrapped (old versions of the proxy do that)\n        // should be safe to remove in the future\n        if (typeof token !== \"string\" && token[\"detail\"]) {\n            return token[\"detail\"];\n        }\n        return token;\n    });\n}\nfunction isUnauthorizedError(message) {\n    // TODO we need better protocol definition with error codes\n    return message[\"status\"] === \"error\" && message[\"error\"] === \"Unauthorized\";\n}\n/**\n * See https://www.rfc-editor.org/rfc/rfc6455.html#section-7.4.1\n */ const WebSocketErrorCodes = {\n    NORMAL_CLOSURE: 1000,\n    GOING_AWAY: 1001\n};\nconst connectionCache = new Map();\nconst connectionCallbacks = new Map();\nfunction reuseInterpreter(key, throttleInterval, onChange) {\n    if (!connectionCache.has(key)) {\n        const machine = (0, robot3_1.interpret)(connectionStateMachine, onChange);\n        connectionCache.set(key, Object.assign(Object.assign({}, machine), {\n            throttledSend: throttleInterval > 0 ? (0, utils_1.throttle)(machine.send, throttleInterval, true) : machine.send\n        }));\n    }\n    return connectionCache.get(key);\n}\nconst noop = ()=>{\n/* No-op */ };\n/**\n * A no-op connection that does not send any message.\n * Useful on the frameworks that reuse code for both ssr and csr (e.g. Next)\n * so the call when doing ssr has no side-effects.\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst NoOpConnection = {\n    send: noop,\n    close: noop\n};\nfunction isSuccessfulResult(data) {\n    return data.status !== \"error\" && data.type !== \"x-fal-message\" && !isFalErrorResult(data);\n}\nfunction isFalErrorResult(data) {\n    return data.type === \"x-fal-error\";\n}\n/**\n * The default implementation of the realtime client.\n */ exports.realtimeImpl = {\n    connect (app, handler) {\n        const { // if running on React in the server, set clientOnly to true by default\n        clientOnly = (0, utils_1.isReact)() && !(0, runtime_1.isBrowser)(), connectionKey = (0, uuid_random_1.default)(), maxBuffering, throttleInterval = DEFAULT_THROTTLE_INTERVAL } = handler;\n        if (clientOnly && !(0, runtime_1.isBrowser)()) {\n            return NoOpConnection;\n        }\n        let previousState;\n        // Although the state machine is cached so we don't open multiple connections,\n        // we still need to update the callbacks so we can call the correct references\n        // when the state machine is reused. This is needed because the callbacks\n        // are passed as part of the handler object, which can be different across\n        // different calls to `connect`.\n        connectionCallbacks.set(connectionKey, {\n            onError: handler.onError,\n            onResult: handler.onResult\n        });\n        const getCallbacks = ()=>connectionCallbacks.get(connectionKey);\n        const stateMachine = reuseInterpreter(connectionKey, throttleInterval, ({ context, machine, send })=>{\n            const { enqueuedMessage, token } = context;\n            if (machine.current === \"active\" && enqueuedMessage) {\n                send({\n                    type: \"send\",\n                    message: enqueuedMessage\n                });\n            }\n            if (machine.current === \"authRequired\" && token === undefined && previousState !== machine.current) {\n                send({\n                    type: \"initiateAuth\"\n                });\n                getToken(app).then((token)=>{\n                    send({\n                        type: \"authenticated\",\n                        token\n                    });\n                    const tokenExpirationTimeout = Math.round(TOKEN_EXPIRATION_SECONDS * 0.9 * 1000);\n                    setTimeout(()=>{\n                        send({\n                            type: \"expireToken\"\n                        });\n                    }, tokenExpirationTimeout);\n                }).catch((error)=>{\n                    send({\n                        type: \"unauthorized\",\n                        error\n                    });\n                });\n            }\n            if (machine.current === \"connecting\" && previousState !== machine.current && token !== undefined) {\n                const ws = new WebSocket(buildRealtimeUrl(app, {\n                    token,\n                    maxBuffering\n                }));\n                ws.onopen = ()=>{\n                    send({\n                        type: \"connected\",\n                        websocket: ws\n                    });\n                };\n                ws.onclose = (event)=>{\n                    if (event.code !== WebSocketErrorCodes.NORMAL_CLOSURE) {\n                        const { onError = noop } = getCallbacks();\n                        onError(new response_1.ApiError({\n                            message: `Error closing the connection: ${event.reason}`,\n                            status: event.code\n                        }));\n                    }\n                    send({\n                        type: \"connectionClosed\",\n                        code: event.code\n                    });\n                };\n                ws.onerror = (event)=>{\n                    // TODO specify error protocol for identified errors\n                    const { onError = noop } = getCallbacks();\n                    onError(new response_1.ApiError({\n                        message: \"Unknown error\",\n                        status: 500\n                    }));\n                };\n                ws.onmessage = (event)=>{\n                    const { onResult } = getCallbacks();\n                    // Handle binary messages as msgpack messages\n                    if (event.data instanceof ArrayBuffer) {\n                        const result = (0, msgpack_1.decode)(new Uint8Array(event.data));\n                        onResult(result);\n                        return;\n                    }\n                    if (event.data instanceof Uint8Array) {\n                        const result = (0, msgpack_1.decode)(event.data);\n                        onResult(result);\n                        return;\n                    }\n                    if (event.data instanceof Blob) {\n                        event.data.arrayBuffer().then((buffer)=>{\n                            const result = (0, msgpack_1.decode)(new Uint8Array(buffer));\n                            onResult(result);\n                        });\n                        return;\n                    }\n                    // Otherwise handle strings as plain JSON messages\n                    const data = JSON.parse(event.data);\n                    // Drop messages that are not related to the actual result.\n                    // In the future, we might want to handle other types of messages.\n                    // TODO: specify the fal ws protocol format\n                    if (isUnauthorizedError(data)) {\n                        send({\n                            type: \"unauthorized\",\n                            error: new Error(\"Unauthorized\")\n                        });\n                        return;\n                    }\n                    if (isSuccessfulResult(data)) {\n                        onResult(data);\n                        return;\n                    }\n                    if (isFalErrorResult(data)) {\n                        if (data.error === \"TIMEOUT\") {\n                            // Timeout error messages just indicate that the connection hasn't\n                            // received an incoming message for a while. We don't need to\n                            // handle them as errors.\n                            return;\n                        }\n                        const { onError = noop } = getCallbacks();\n                        onError(new response_1.ApiError({\n                            message: `${data.error}: ${data.reason}`,\n                            // TODO better error status code\n                            status: 400,\n                            body: data\n                        }));\n                        return;\n                    }\n                };\n            }\n            previousState = machine.current;\n        });\n        const send = (input)=>{\n            // Use throttled send to avoid sending too many messages\n            var _a;\n            const message = input instanceof Uint8Array ? input : Object.assign(Object.assign({}, input), {\n                request_id: (_a = input[\"request_id\"]) !== null && _a !== void 0 ? _a : (0, uuid_random_1.default)()\n            });\n            stateMachine.throttledSend({\n                type: \"send\",\n                message\n            });\n        };\n        const close = ()=>{\n            stateMachine.send({\n                type: \"close\"\n            });\n        };\n        return {\n            send,\n            close\n        };\n    }\n}; //# sourceMappingURL=realtime.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9zZXJ2ZXJsZXNzLWNsaWVudC9zcmMvcmVhbHRpbWUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxZQUFZLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsU0FBUyxJQUFLLFNBQVVDLE9BQU8sRUFBRUMsVUFBVSxFQUFFQyxDQUFDLEVBQUVDLFNBQVM7SUFDbkYsU0FBU0MsTUFBTUMsS0FBSztRQUFJLE9BQU9BLGlCQUFpQkgsSUFBSUcsUUFBUSxJQUFJSCxFQUFFLFNBQVVJLE9BQU87WUFBSUEsUUFBUUQ7UUFBUTtJQUFJO0lBQzNHLE9BQU8sSUFBS0gsQ0FBQUEsS0FBTUEsQ0FBQUEsSUFBSUssT0FBTSxDQUFDLEVBQUcsU0FBVUQsT0FBTyxFQUFFRSxNQUFNO1FBQ3JELFNBQVNDLFVBQVVKLEtBQUs7WUFBSSxJQUFJO2dCQUFFSyxLQUFLUCxVQUFVUSxJQUFJLENBQUNOO1lBQVMsRUFBRSxPQUFPTyxHQUFHO2dCQUFFSixPQUFPSTtZQUFJO1FBQUU7UUFDMUYsU0FBU0MsU0FBU1IsS0FBSztZQUFJLElBQUk7Z0JBQUVLLEtBQUtQLFNBQVMsQ0FBQyxRQUFRLENBQUNFO1lBQVMsRUFBRSxPQUFPTyxHQUFHO2dCQUFFSixPQUFPSTtZQUFJO1FBQUU7UUFDN0YsU0FBU0YsS0FBS0ksTUFBTTtZQUFJQSxPQUFPQyxJQUFJLEdBQUdULFFBQVFRLE9BQU9ULEtBQUssSUFBSUQsTUFBTVUsT0FBT1QsS0FBSyxFQUFFVyxJQUFJLENBQUNQLFdBQVdJO1FBQVc7UUFDN0dILEtBQUssQ0FBQ1AsWUFBWUEsVUFBVWMsS0FBSyxDQUFDakIsU0FBU0MsY0FBYyxFQUFFLEdBQUdVLElBQUk7SUFDdEU7QUFDSjtBQUNBLElBQUlPLGtCQUFrQixDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLGVBQWUsSUFBSyxTQUFVQyxHQUFHO0lBQ2pFLE9BQU8sT0FBUUEsSUFBSUMsVUFBVSxHQUFJRCxNQUFNO1FBQUUsV0FBV0E7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LGtFQUFrRTs0QkFDbEUsNkRBQTZEOzRCQUM3RCx5QkFBeUI7NEJBQ3pCO3dCQUNKO3dCQUNBLE1BQU0sRUFBRVYsVUFBVWYsSUFBSSxFQUFFLEdBQUdpQjt3QkFDM0JGLFFBQVEsSUFBSXZHLFdBQVdzSCxRQUFRLENBQUM7NEJBQzVCekcsU0FBUyxDQUFDLEVBQUU4RSxLQUFLc0IsS0FBSyxDQUFDLEVBQUUsRUFBRXRCLEtBQUs0QixNQUFNLENBQUMsQ0FBQzs0QkFDeEMsZ0NBQWdDOzRCQUNoQzNCLFFBQVE7NEJBQ1JrQyxNQUFNbkM7d0JBQ1Y7d0JBQ0E7b0JBQ0o7Z0JBQ0o7WUFDSjtZQUNBVyxnQkFBZ0JuQixRQUFRd0IsT0FBTztRQUNuQztRQUNBLE1BQU1yRixPQUFPLENBQUN5RztZQUNWLHdEQUF3RDtZQUN4RCxJQUFJQztZQUNKLE1BQU1uSCxVQUFVa0gsaUJBQWlCMUcsYUFDM0IwRyxRQUNBekksT0FBT3NCLE1BQU0sQ0FBQ3RCLE9BQU9zQixNQUFNLENBQUMsQ0FBQyxHQUFHbUgsUUFBUTtnQkFBRUUsWUFBWSxDQUFDRCxLQUFLRCxLQUFLLENBQUMsYUFBYSxNQUFNLFFBQVFDLE9BQU8sS0FBSyxJQUFJQSxLQUFLLENBQUMsR0FBR25JLGNBQWN3RyxPQUFPO1lBQUk7WUFDckpLLGFBQWFyQixhQUFhLENBQUM7Z0JBQ3ZCUSxNQUFNO2dCQUNOaEY7WUFDSjtRQUNKO1FBQ0EsTUFBTU0sUUFBUTtZQUNWdUYsYUFBYXBGLElBQUksQ0FBQztnQkFBRXVFLE1BQU07WUFBUTtRQUN0QztRQUNBLE9BQU87WUFDSHZFO1lBQ0FIO1FBQ0o7SUFDSjtBQUNKLEdBQ0Esb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWxiLWFpcGhvdG8vLi9ub2RlX21vZHVsZXMvQGZhbC1haS9zZXJ2ZXJsZXNzLWNsaWVudC9zcmMvcmVhbHRpbWUuanM/ODk1ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZWFsdGltZUltcGwgPSB2b2lkIDA7XG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG5jb25zdCBtc2dwYWNrXzEgPSByZXF1aXJlKFwiQG1zZ3BhY2svbXNncGFja1wiKTtcbmNvbnN0IHJvYm90M18xID0gcmVxdWlyZShcInJvYm90M1wiKTtcbmNvbnN0IHV1aWRfcmFuZG9tXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInV1aWQtcmFuZG9tXCIpKTtcbmNvbnN0IGNvbmZpZ18xID0gcmVxdWlyZShcIi4vY29uZmlnXCIpO1xuY29uc3QgcmVxdWVzdF8xID0gcmVxdWlyZShcIi4vcmVxdWVzdFwiKTtcbmNvbnN0IHJlc3BvbnNlXzEgPSByZXF1aXJlKFwiLi9yZXNwb25zZVwiKTtcbmNvbnN0IHJ1bnRpbWVfMSA9IHJlcXVpcmUoXCIuL3J1bnRpbWVcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5jb25zdCBpbml0aWFsU3RhdGUgPSAoKSA9PiAoe1xuICAgIGVucXVldWVkTWVzc2FnZTogdW5kZWZpbmVkLFxufSk7XG5mdW5jdGlvbiBoYXNUb2tlbihjb250ZXh0KSB7XG4gICAgcmV0dXJuIGNvbnRleHQudG9rZW4gIT09IHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIG5vVG9rZW4oY29udGV4dCkge1xuICAgIHJldHVybiAhaGFzVG9rZW4oY29udGV4dCk7XG59XG5mdW5jdGlvbiBlbnF1ZXVlTWVzc2FnZShjb250ZXh0LCBldmVudCkge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGNvbnRleHQpLCB7IGVucXVldWVkTWVzc2FnZTogZXZlbnQubWVzc2FnZSB9KTtcbn1cbmZ1bmN0aW9uIGNsb3NlQ29ubmVjdGlvbihjb250ZXh0KSB7XG4gICAgaWYgKGNvbnRleHQud2Vic29ja2V0ICYmIGNvbnRleHQud2Vic29ja2V0LnJlYWR5U3RhdGUgPT09IFdlYlNvY2tldC5PUEVOKSB7XG4gICAgICAgIGNvbnRleHQud2Vic29ja2V0LmNsb3NlKCk7XG4gICAgfVxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGNvbnRleHQpLCB7IHdlYnNvY2tldDogdW5kZWZpbmVkIH0pO1xufVxuZnVuY3Rpb24gc2VuZE1lc3NhZ2UoY29udGV4dCwgZXZlbnQpIHtcbiAgICBpZiAoY29udGV4dC53ZWJzb2NrZXQgJiYgY29udGV4dC53ZWJzb2NrZXQucmVhZHlTdGF0ZSA9PT0gV2ViU29ja2V0Lk9QRU4pIHtcbiAgICAgICAgaWYgKGV2ZW50Lm1lc3NhZ2UgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgICAgICBjb250ZXh0LndlYnNvY2tldC5zZW5kKGV2ZW50Lm1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHNob3VsZFNlbmRCaW5hcnkoZXZlbnQubWVzc2FnZSkpIHtcbiAgICAgICAgICAgIGNvbnRleHQud2Vic29ja2V0LnNlbmQoKDAsIG1zZ3BhY2tfMS5lbmNvZGUpKGV2ZW50Lm1lc3NhZ2UpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnRleHQud2Vic29ja2V0LnNlbmQoSlNPTi5zdHJpbmdpZnkoZXZlbnQubWVzc2FnZSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGNvbnRleHQpLCB7IGVucXVldWVkTWVzc2FnZTogdW5kZWZpbmVkIH0pO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBjb250ZXh0KSwgeyBlbnF1ZXVlZE1lc3NhZ2U6IGV2ZW50Lm1lc3NhZ2UgfSk7XG59XG5mdW5jdGlvbiBleHBpcmVUb2tlbihjb250ZXh0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgY29udGV4dCksIHsgdG9rZW46IHVuZGVmaW5lZCB9KTtcbn1cbmZ1bmN0aW9uIHNldFRva2VuKGNvbnRleHQsIGV2ZW50KSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgY29udGV4dCksIHsgdG9rZW46IGV2ZW50LnRva2VuIH0pO1xufVxuZnVuY3Rpb24gY29ubmVjdGlvbkVzdGFibGlzaGVkKGNvbnRleHQsIGV2ZW50KSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgY29udGV4dCksIHsgd2Vic29ja2V0OiBldmVudC53ZWJzb2NrZXQgfSk7XG59XG4vLyBTdGF0ZSBtYWNoaW5lXG5jb25zdCBjb25uZWN0aW9uU3RhdGVNYWNoaW5lID0gKDAsIHJvYm90M18xLmNyZWF0ZU1hY2hpbmUpKCdpZGxlJywge1xuICAgIGlkbGU6ICgwLCByb2JvdDNfMS5zdGF0ZSkoKDAsIHJvYm90M18xLnRyYW5zaXRpb24pKCdzZW5kJywgJ2Nvbm5lY3RpbmcnLCAoMCwgcm9ib3QzXzEucmVkdWNlKShlbnF1ZXVlTWVzc2FnZSkpLCAoMCwgcm9ib3QzXzEudHJhbnNpdGlvbikoJ2V4cGlyZVRva2VuJywgJ2lkbGUnLCAoMCwgcm9ib3QzXzEucmVkdWNlKShleHBpcmVUb2tlbikpKSxcbiAgICBjb25uZWN0aW5nOiAoMCwgcm9ib3QzXzEuc3RhdGUpKCgwLCByb2JvdDNfMS50cmFuc2l0aW9uKSgnY29ubmVjdGluZycsICdjb25uZWN0aW5nJyksICgwLCByb2JvdDNfMS50cmFuc2l0aW9uKSgnY29ubmVjdGVkJywgJ2FjdGl2ZScsICgwLCByb2JvdDNfMS5yZWR1Y2UpKGNvbm5lY3Rpb25Fc3RhYmxpc2hlZCkpLCAoMCwgcm9ib3QzXzEudHJhbnNpdGlvbikoJ2Nvbm5lY3Rpb25DbG9zZWQnLCAnaWRsZScsICgwLCByb2JvdDNfMS5yZWR1Y2UpKGNsb3NlQ29ubmVjdGlvbikpLCAoMCwgcm9ib3QzXzEudHJhbnNpdGlvbikoJ3NlbmQnLCAnY29ubmVjdGluZycsICgwLCByb2JvdDNfMS5yZWR1Y2UpKGVucXVldWVNZXNzYWdlKSksICgwLCByb2JvdDNfMS5pbW1lZGlhdGUpKCdhdXRoUmVxdWlyZWQnLCAoMCwgcm9ib3QzXzEuZ3VhcmQpKG5vVG9rZW4pKSksXG4gICAgYXV0aFJlcXVpcmVkOiAoMCwgcm9ib3QzXzEuc3RhdGUpKCgwLCByb2JvdDNfMS50cmFuc2l0aW9uKSgnaW5pdGlhdGVBdXRoJywgJ2F1dGhJblByb2dyZXNzJyksICgwLCByb2JvdDNfMS50cmFuc2l0aW9uKSgnc2VuZCcsICdhdXRoUmVxdWlyZWQnLCAoMCwgcm9ib3QzXzEucmVkdWNlKShlbnF1ZXVlTWVzc2FnZSkpKSxcbiAgICBhdXRoSW5Qcm9ncmVzczogKDAsIHJvYm90M18xLnN0YXRlKSgoMCwgcm9ib3QzXzEudHJhbnNpdGlvbikoJ2F1dGhlbnRpY2F0ZWQnLCAnY29ubmVjdGluZycsICgwLCByb2JvdDNfMS5yZWR1Y2UpKHNldFRva2VuKSksICgwLCByb2JvdDNfMS50cmFuc2l0aW9uKSgndW5hdXRob3JpemVkJywgJ2lkbGUnLCAoMCwgcm9ib3QzXzEucmVkdWNlKShleHBpcmVUb2tlbiksICgwLCByb2JvdDNfMS5yZWR1Y2UpKGNsb3NlQ29ubmVjdGlvbikpLCAoMCwgcm9ib3QzXzEudHJhbnNpdGlvbikoJ3NlbmQnLCAnYXV0aEluUHJvZ3Jlc3MnLCAoMCwgcm9ib3QzXzEucmVkdWNlKShlbnF1ZXVlTWVzc2FnZSkpKSxcbiAgICBhY3RpdmU6ICgwLCByb2JvdDNfMS5zdGF0ZSkoKDAsIHJvYm90M18xLnRyYW5zaXRpb24pKCdzZW5kJywgJ2FjdGl2ZScsICgwLCByb2JvdDNfMS5yZWR1Y2UpKHNlbmRNZXNzYWdlKSksICgwLCByb2JvdDNfMS50cmFuc2l0aW9uKSgndW5hdXRob3JpemVkJywgJ2lkbGUnLCAoMCwgcm9ib3QzXzEucmVkdWNlKShleHBpcmVUb2tlbikpLCAoMCwgcm9ib3QzXzEudHJhbnNpdGlvbikoJ2Nvbm5lY3Rpb25DbG9zZWQnLCAnaWRsZScsICgwLCByb2JvdDNfMS5yZWR1Y2UpKGNsb3NlQ29ubmVjdGlvbikpKSxcbiAgICBmYWlsZWQ6ICgwLCByb2JvdDNfMS5zdGF0ZSkoKDAsIHJvYm90M18xLnRyYW5zaXRpb24pKCdzZW5kJywgJ2ZhaWxlZCcpKSxcbn0sIGluaXRpYWxTdGF0ZSk7XG4vLyBUaGlzIGlzIGEgbGlzdCBvZiBhcHBzIGRlcGxveWVkIGJlZm9yZSBmb3JtYWwgcmVhbHRpbWUgc3VwcG9ydC4gVGhlaXIgVVJMcyBmb2xsb3dcbi8vIGEgZGlmZmVyZW50IHBhdHRlcm4gYW5kIHdpbGwgYmUga2VwdCBoZXJlIHVudGlsIHdlIGZ1bGx5IHN1bnNldCB0aGVtLlxuY29uc3QgTEVHQUNZX0FQUFMgPSBbXG4gICAgJ2xjbS1zZDE1LWkyaScsXG4gICAgJ2xjbScsXG4gICAgJ3NkeGwtdHVyYm8tcmVhbHRpbWUnLFxuICAgICdzZC10dXJiby1yZWFsLXRpbWUtaGlnaC1mcHMtbXNncGFjay1hMTBnJyxcbiAgICAnbGNtLXBsZXhlZC1zZDE1LWkyaScsXG4gICAgJ3NkLXR1cmJvLXJlYWwtdGltZS1oaWdoLWZwcy1tc2dwYWNrJyxcbl07XG5mdW5jdGlvbiBidWlsZFJlYWx0aW1lVXJsKGFwcCwgeyB0b2tlbiwgbWF4QnVmZmVyaW5nIH0pIHtcbiAgICBpZiAobWF4QnVmZmVyaW5nICE9PSB1bmRlZmluZWQgJiYgKG1heEJ1ZmZlcmluZyA8IDEgfHwgbWF4QnVmZmVyaW5nID4gNjApKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIGBtYXhCdWZmZXJpbmdgIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA2MCAoaW5jbHVzaXZlKScpO1xuICAgIH1cbiAgICBjb25zdCBxdWVyeVBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoe1xuICAgICAgICBmYWxfand0X3Rva2VuOiB0b2tlbixcbiAgICB9KTtcbiAgICBpZiAobWF4QnVmZmVyaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcXVlcnlQYXJhbXMuc2V0KCdtYXhfYnVmZmVyaW5nJywgbWF4QnVmZmVyaW5nLnRvRml4ZWQoMCkpO1xuICAgIH1cbiAgICBjb25zdCBhcHBJZCA9ICgwLCB1dGlsc18xLmVuc3VyZUFwcElkRm9ybWF0KShhcHApO1xuICAgIGNvbnN0IFssIGFwcEFsaWFzXSA9ICgwLCB1dGlsc18xLmVuc3VyZUFwcElkRm9ybWF0KShhcHApLnNwbGl0KCcvJyk7XG4gICAgY29uc3Qgc3VmZml4ID0gTEVHQUNZX0FQUFMuaW5jbHVkZXMoYXBwQWxpYXMpIHx8ICFhcHAuaW5jbHVkZXMoJy8nKSA/ICd3cycgOiAncmVhbHRpbWUnO1xuICAgIHJldHVybiBgd3NzOi8vZmFsLnJ1bi8ke2FwcElkfS8ke3N1ZmZpeH0/JHtxdWVyeVBhcmFtcy50b1N0cmluZygpfWA7XG59XG5jb25zdCBUT0tFTl9FWFBJUkFUSU9OX1NFQ09ORFMgPSAxMjA7XG5jb25zdCBERUZBVUxUX1RIUk9UVExFX0lOVEVSVkFMID0gMTI4O1xuZnVuY3Rpb24gc2hvdWxkU2VuZEJpbmFyeShtZXNzYWdlKSB7XG4gICAgcmV0dXJuIE9iamVjdC52YWx1ZXMobWVzc2FnZSkuc29tZSgodmFsdWUpID0+IHZhbHVlIGluc3RhbmNlb2YgQmxvYiB8fFxuICAgICAgICB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyIHx8XG4gICAgICAgIHZhbHVlIGluc3RhbmNlb2YgVWludDhBcnJheSk7XG59XG4vKipcbiAqIEdldCBhIHRva2VuIHRvIGNvbm5lY3QgdG8gdGhlIHJlYWx0aW1lIGVuZHBvaW50LlxuICovXG5mdW5jdGlvbiBnZXRUb2tlbihhcHApIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBjb25zdCBbLCBhcHBBbGlhc10gPSAoMCwgdXRpbHNfMS5lbnN1cmVBcHBJZEZvcm1hdCkoYXBwKS5zcGxpdCgnLycpO1xuICAgICAgICBjb25zdCB0b2tlbiA9IHlpZWxkICgwLCByZXF1ZXN0XzEuZGlzcGF0Y2hSZXF1ZXN0KSgnUE9TVCcsIGAkeygwLCBjb25maWdfMS5nZXRSZXN0QXBpVXJsKSgpfS90b2tlbnMvYCwge1xuICAgICAgICAgICAgYWxsb3dlZF9hcHBzOiBbYXBwQWxpYXNdLFxuICAgICAgICAgICAgdG9rZW5fZXhwaXJhdGlvbjogVE9LRU5fRVhQSVJBVElPTl9TRUNPTkRTLFxuICAgICAgICB9KTtcbiAgICAgICAgLy8ga2VlcCB0aGlzIGluIGNhc2UgdGhlIHJlc3BvbnNlIHdhcyB3cmFwcGVkIChvbGQgdmVyc2lvbnMgb2YgdGhlIHByb3h5IGRvIHRoYXQpXG4gICAgICAgIC8vIHNob3VsZCBiZSBzYWZlIHRvIHJlbW92ZSBpbiB0aGUgZnV0dXJlXG4gICAgICAgIGlmICh0eXBlb2YgdG9rZW4gIT09ICdzdHJpbmcnICYmIHRva2VuWydkZXRhaWwnXSkge1xuICAgICAgICAgICAgcmV0dXJuIHRva2VuWydkZXRhaWwnXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgfSk7XG59XG5mdW5jdGlvbiBpc1VuYXV0aG9yaXplZEVycm9yKG1lc3NhZ2UpIHtcbiAgICAvLyBUT0RPIHdlIG5lZWQgYmV0dGVyIHByb3RvY29sIGRlZmluaXRpb24gd2l0aCBlcnJvciBjb2Rlc1xuICAgIHJldHVybiBtZXNzYWdlWydzdGF0dXMnXSA9PT0gJ2Vycm9yJyAmJiBtZXNzYWdlWydlcnJvciddID09PSAnVW5hdXRob3JpemVkJztcbn1cbi8qKlxuICogU2VlIGh0dHBzOi8vd3d3LnJmYy1lZGl0b3Iub3JnL3JmYy9yZmM2NDU1Lmh0bWwjc2VjdGlvbi03LjQuMVxuICovXG5jb25zdCBXZWJTb2NrZXRFcnJvckNvZGVzID0ge1xuICAgIE5PUk1BTF9DTE9TVVJFOiAxMDAwLFxuICAgIEdPSU5HX0FXQVk6IDEwMDEsXG59O1xuY29uc3QgY29ubmVjdGlvbkNhY2hlID0gbmV3IE1hcCgpO1xuY29uc3QgY29ubmVjdGlvbkNhbGxiYWNrcyA9IG5ldyBNYXAoKTtcbmZ1bmN0aW9uIHJldXNlSW50ZXJwcmV0ZXIoa2V5LCB0aHJvdHRsZUludGVydmFsLCBvbkNoYW5nZSkge1xuICAgIGlmICghY29ubmVjdGlvbkNhY2hlLmhhcyhrZXkpKSB7XG4gICAgICAgIGNvbnN0IG1hY2hpbmUgPSAoMCwgcm9ib3QzXzEuaW50ZXJwcmV0KShjb25uZWN0aW9uU3RhdGVNYWNoaW5lLCBvbkNoYW5nZSk7XG4gICAgICAgIGNvbm5lY3Rpb25DYWNoZS5zZXQoa2V5LCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG1hY2hpbmUpLCB7IHRocm90dGxlZFNlbmQ6IHRocm90dGxlSW50ZXJ2YWwgPiAwXG4gICAgICAgICAgICAgICAgPyAoMCwgdXRpbHNfMS50aHJvdHRsZSkobWFjaGluZS5zZW5kLCB0aHJvdHRsZUludGVydmFsLCB0cnVlKVxuICAgICAgICAgICAgICAgIDogbWFjaGluZS5zZW5kIH0pKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbm5lY3Rpb25DYWNoZS5nZXQoa2V5KTtcbn1cbmNvbnN0IG5vb3AgPSAoKSA9PiB7XG4gICAgLyogTm8tb3AgKi9cbn07XG4vKipcbiAqIEEgbm8tb3AgY29ubmVjdGlvbiB0aGF0IGRvZXMgbm90IHNlbmQgYW55IG1lc3NhZ2UuXG4gKiBVc2VmdWwgb24gdGhlIGZyYW1ld29ya3MgdGhhdCByZXVzZSBjb2RlIGZvciBib3RoIHNzciBhbmQgY3NyIChlLmcuIE5leHQpXG4gKiBzbyB0aGUgY2FsbCB3aGVuIGRvaW5nIHNzciBoYXMgbm8gc2lkZS1lZmZlY3RzLlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuY29uc3QgTm9PcENvbm5lY3Rpb24gPSB7XG4gICAgc2VuZDogbm9vcCxcbiAgICBjbG9zZTogbm9vcCxcbn07XG5mdW5jdGlvbiBpc1N1Y2Nlc3NmdWxSZXN1bHQoZGF0YSkge1xuICAgIHJldHVybiAoZGF0YS5zdGF0dXMgIT09ICdlcnJvcicgJiZcbiAgICAgICAgZGF0YS50eXBlICE9PSAneC1mYWwtbWVzc2FnZScgJiZcbiAgICAgICAgIWlzRmFsRXJyb3JSZXN1bHQoZGF0YSkpO1xufVxuZnVuY3Rpb24gaXNGYWxFcnJvclJlc3VsdChkYXRhKSB7XG4gICAgcmV0dXJuIGRhdGEudHlwZSA9PT0gJ3gtZmFsLWVycm9yJztcbn1cbi8qKlxuICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIHJlYWx0aW1lIGNsaWVudC5cbiAqL1xuZXhwb3J0cy5yZWFsdGltZUltcGwgPSB7XG4gICAgY29ubmVjdChhcHAsIGhhbmRsZXIpIHtcbiAgICAgICAgY29uc3QgeyBcbiAgICAgICAgLy8gaWYgcnVubmluZyBvbiBSZWFjdCBpbiB0aGUgc2VydmVyLCBzZXQgY2xpZW50T25seSB0byB0cnVlIGJ5IGRlZmF1bHRcbiAgICAgICAgY2xpZW50T25seSA9ICgwLCB1dGlsc18xLmlzUmVhY3QpKCkgJiYgISgwLCBydW50aW1lXzEuaXNCcm93c2VyKSgpLCBjb25uZWN0aW9uS2V5ID0gKDAsIHV1aWRfcmFuZG9tXzEuZGVmYXVsdCkoKSwgbWF4QnVmZmVyaW5nLCB0aHJvdHRsZUludGVydmFsID0gREVGQVVMVF9USFJPVFRMRV9JTlRFUlZBTCwgfSA9IGhhbmRsZXI7XG4gICAgICAgIGlmIChjbGllbnRPbmx5ICYmICEoMCwgcnVudGltZV8xLmlzQnJvd3NlcikoKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5vT3BDb25uZWN0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGxldCBwcmV2aW91c1N0YXRlO1xuICAgICAgICAvLyBBbHRob3VnaCB0aGUgc3RhdGUgbWFjaGluZSBpcyBjYWNoZWQgc28gd2UgZG9uJ3Qgb3BlbiBtdWx0aXBsZSBjb25uZWN0aW9ucyxcbiAgICAgICAgLy8gd2Ugc3RpbGwgbmVlZCB0byB1cGRhdGUgdGhlIGNhbGxiYWNrcyBzbyB3ZSBjYW4gY2FsbCB0aGUgY29ycmVjdCByZWZlcmVuY2VzXG4gICAgICAgIC8vIHdoZW4gdGhlIHN0YXRlIG1hY2hpbmUgaXMgcmV1c2VkLiBUaGlzIGlzIG5lZWRlZCBiZWNhdXNlIHRoZSBjYWxsYmFja3NcbiAgICAgICAgLy8gYXJlIHBhc3NlZCBhcyBwYXJ0IG9mIHRoZSBoYW5kbGVyIG9iamVjdCwgd2hpY2ggY2FuIGJlIGRpZmZlcmVudCBhY3Jvc3NcbiAgICAgICAgLy8gZGlmZmVyZW50IGNhbGxzIHRvIGBjb25uZWN0YC5cbiAgICAgICAgY29ubmVjdGlvbkNhbGxiYWNrcy5zZXQoY29ubmVjdGlvbktleSwge1xuICAgICAgICAgICAgb25FcnJvcjogaGFuZGxlci5vbkVycm9yLFxuICAgICAgICAgICAgb25SZXN1bHQ6IGhhbmRsZXIub25SZXN1bHQsXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBnZXRDYWxsYmFja3MgPSAoKSA9PiBjb25uZWN0aW9uQ2FsbGJhY2tzLmdldChjb25uZWN0aW9uS2V5KTtcbiAgICAgICAgY29uc3Qgc3RhdGVNYWNoaW5lID0gcmV1c2VJbnRlcnByZXRlcihjb25uZWN0aW9uS2V5LCB0aHJvdHRsZUludGVydmFsLCAoeyBjb250ZXh0LCBtYWNoaW5lLCBzZW5kIH0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgZW5xdWV1ZWRNZXNzYWdlLCB0b2tlbiB9ID0gY29udGV4dDtcbiAgICAgICAgICAgIGlmIChtYWNoaW5lLmN1cnJlbnQgPT09ICdhY3RpdmUnICYmIGVucXVldWVkTWVzc2FnZSkge1xuICAgICAgICAgICAgICAgIHNlbmQoeyB0eXBlOiAnc2VuZCcsIG1lc3NhZ2U6IGVucXVldWVkTWVzc2FnZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYWNoaW5lLmN1cnJlbnQgPT09ICdhdXRoUmVxdWlyZWQnICYmXG4gICAgICAgICAgICAgICAgdG9rZW4gPT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgIHByZXZpb3VzU3RhdGUgIT09IG1hY2hpbmUuY3VycmVudCkge1xuICAgICAgICAgICAgICAgIHNlbmQoeyB0eXBlOiAnaW5pdGlhdGVBdXRoJyB9KTtcbiAgICAgICAgICAgICAgICBnZXRUb2tlbihhcHApXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKCh0b2tlbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzZW5kKHsgdHlwZTogJ2F1dGhlbnRpY2F0ZWQnLCB0b2tlbiB9KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdG9rZW5FeHBpcmF0aW9uVGltZW91dCA9IE1hdGgucm91bmQoVE9LRU5fRVhQSVJBVElPTl9TRUNPTkRTICogMC45ICogMTAwMCk7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VuZCh7IHR5cGU6ICdleHBpcmVUb2tlbicgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sIHRva2VuRXhwaXJhdGlvblRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2VuZCh7IHR5cGU6ICd1bmF1dGhvcml6ZWQnLCBlcnJvciB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYWNoaW5lLmN1cnJlbnQgPT09ICdjb25uZWN0aW5nJyAmJlxuICAgICAgICAgICAgICAgIHByZXZpb3VzU3RhdGUgIT09IG1hY2hpbmUuY3VycmVudCAmJlxuICAgICAgICAgICAgICAgIHRva2VuICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB3cyA9IG5ldyBXZWJTb2NrZXQoYnVpbGRSZWFsdGltZVVybChhcHAsIHsgdG9rZW4sIG1heEJ1ZmZlcmluZyB9KSk7XG4gICAgICAgICAgICAgICAgd3Mub25vcGVuID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzZW5kKHsgdHlwZTogJ2Nvbm5lY3RlZCcsIHdlYnNvY2tldDogd3MgfSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB3cy5vbmNsb3NlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5jb2RlICE9PSBXZWJTb2NrZXRFcnJvckNvZGVzLk5PUk1BTF9DTE9TVVJFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IG9uRXJyb3IgPSBub29wIH0gPSBnZXRDYWxsYmFja3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uRXJyb3IobmV3IHJlc3BvbnNlXzEuQXBpRXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBFcnJvciBjbG9zaW5nIHRoZSBjb25uZWN0aW9uOiAke2V2ZW50LnJlYXNvbn1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogZXZlbnQuY29kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZW5kKHsgdHlwZTogJ2Nvbm5lY3Rpb25DbG9zZWQnLCBjb2RlOiBldmVudC5jb2RlIH0pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgd3Mub25lcnJvciA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIHNwZWNpZnkgZXJyb3IgcHJvdG9jb2wgZm9yIGlkZW50aWZpZWQgZXJyb3JzXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgb25FcnJvciA9IG5vb3AgfSA9IGdldENhbGxiYWNrcygpO1xuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKG5ldyByZXNwb25zZV8xLkFwaUVycm9yKHsgbWVzc2FnZTogJ1Vua25vd24gZXJyb3InLCBzdGF0dXM6IDUwMCB9KSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB3cy5vbm1lc3NhZ2UgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBvblJlc3VsdCB9ID0gZ2V0Q2FsbGJhY2tzKCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBiaW5hcnkgbWVzc2FnZXMgYXMgbXNncGFjayBtZXNzYWdlc1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSAoMCwgbXNncGFja18xLmRlY29kZSkobmV3IFVpbnQ4QXJyYXkoZXZlbnQuZGF0YSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb25SZXN1bHQocmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuZGF0YSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9ICgwLCBtc2dwYWNrXzEuZGVjb2RlKShldmVudC5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uUmVzdWx0KHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LmRhdGEgaW5zdGFuY2VvZiBCbG9iKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5kYXRhLmFycmF5QnVmZmVyKCkudGhlbigoYnVmZmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gKDAsIG1zZ3BhY2tfMS5kZWNvZGUpKG5ldyBVaW50OEFycmF5KGJ1ZmZlcikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUmVzdWx0KHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBPdGhlcndpc2UgaGFuZGxlIHN0cmluZ3MgYXMgcGxhaW4gSlNPTiBtZXNzYWdlc1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShldmVudC5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gRHJvcCBtZXNzYWdlcyB0aGF0IGFyZSBub3QgcmVsYXRlZCB0byB0aGUgYWN0dWFsIHJlc3VsdC5cbiAgICAgICAgICAgICAgICAgICAgLy8gSW4gdGhlIGZ1dHVyZSwgd2UgbWlnaHQgd2FudCB0byBoYW5kbGUgb3RoZXIgdHlwZXMgb2YgbWVzc2FnZXMuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IHNwZWNpZnkgdGhlIGZhbCB3cyBwcm90b2NvbCBmb3JtYXRcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzVW5hdXRob3JpemVkRXJyb3IoZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbmQoeyB0eXBlOiAndW5hdXRob3JpemVkJywgZXJyb3I6IG5ldyBFcnJvcignVW5hdXRob3JpemVkJykgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzU3VjY2Vzc2Z1bFJlc3VsdChkYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25SZXN1bHQoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzRmFsRXJyb3JSZXN1bHQoZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmVycm9yID09PSAnVElNRU9VVCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaW1lb3V0IGVycm9yIG1lc3NhZ2VzIGp1c3QgaW5kaWNhdGUgdGhhdCB0aGUgY29ubmVjdGlvbiBoYXNuJ3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZWNlaXZlZCBhbiBpbmNvbWluZyBtZXNzYWdlIGZvciBhIHdoaWxlLiBXZSBkb24ndCBuZWVkIHRvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaGFuZGxlIHRoZW0gYXMgZXJyb3JzLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgb25FcnJvciA9IG5vb3AgfSA9IGdldENhbGxiYWNrcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb25FcnJvcihuZXcgcmVzcG9uc2VfMS5BcGlFcnJvcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYCR7ZGF0YS5lcnJvcn06ICR7ZGF0YS5yZWFzb259YCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIGJldHRlciBlcnJvciBzdGF0dXMgY29kZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IGRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJldmlvdXNTdGF0ZSA9IG1hY2hpbmUuY3VycmVudDtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHNlbmQgPSAoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIC8vIFVzZSB0aHJvdHRsZWQgc2VuZCB0byBhdm9pZCBzZW5kaW5nIHRvbyBtYW55IG1lc3NhZ2VzXG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gaW5wdXQgaW5zdGFuY2VvZiBVaW50OEFycmF5XG4gICAgICAgICAgICAgICAgPyBpbnB1dFxuICAgICAgICAgICAgICAgIDogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBpbnB1dCksIHsgcmVxdWVzdF9pZDogKF9hID0gaW5wdXRbJ3JlcXVlc3RfaWQnXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogKDAsIHV1aWRfcmFuZG9tXzEuZGVmYXVsdCkoKSB9KTtcbiAgICAgICAgICAgIHN0YXRlTWFjaGluZS50aHJvdHRsZWRTZW5kKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnc2VuZCcsXG4gICAgICAgICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHN0YXRlTWFjaGluZS5zZW5kKHsgdHlwZTogJ2Nsb3NlJyB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNlbmQsXG4gICAgICAgICAgICBjbG9zZSxcbiAgICAgICAgfTtcbiAgICB9LFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWx0aW1lLmpzLm1hcCJdLCJuYW1lcyI6WyJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJhZG9wdCIsInZhbHVlIiwicmVzb2x2ZSIsIlByb21pc2UiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJzdGVwIiwibmV4dCIsImUiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiLCJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwicmVhbHRpbWVJbXBsIiwibXNncGFja18xIiwicmVxdWlyZSIsInJvYm90M18xIiwidXVpZF9yYW5kb21fMSIsImNvbmZpZ18xIiwicmVxdWVzdF8xIiwicmVzcG9uc2VfMSIsInJ1bnRpbWVfMSIsInV0aWxzXzEiLCJpbml0aWFsU3RhdGUiLCJlbnF1ZXVlZE1lc3NhZ2UiLCJ1bmRlZmluZWQiLCJoYXNUb2tlbiIsImNvbnRleHQiLCJ0b2tlbiIsIm5vVG9rZW4iLCJlbnF1ZXVlTWVzc2FnZSIsImV2ZW50IiwiYXNzaWduIiwibWVzc2FnZSIsImNsb3NlQ29ubmVjdGlvbiIsIndlYnNvY2tldCIsInJlYWR5U3RhdGUiLCJXZWJTb2NrZXQiLCJPUEVOIiwiY2xvc2UiLCJzZW5kTWVzc2FnZSIsIlVpbnQ4QXJyYXkiLCJzZW5kIiwic2hvdWxkU2VuZEJpbmFyeSIsImVuY29kZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJleHBpcmVUb2tlbiIsInNldFRva2VuIiwiY29ubmVjdGlvbkVzdGFibGlzaGVkIiwiY29ubmVjdGlvblN0YXRlTWFjaGluZSIsImNyZWF0ZU1hY2hpbmUiLCJpZGxlIiwic3RhdGUiLCJ0cmFuc2l0aW9uIiwicmVkdWNlIiwiY29ubmVjdGluZyIsImltbWVkaWF0ZSIsImd1YXJkIiwiYXV0aFJlcXVpcmVkIiwiYXV0aEluUHJvZ3Jlc3MiLCJhY3RpdmUiLCJmYWlsZWQiLCJMRUdBQ1lfQVBQUyIsImJ1aWxkUmVhbHRpbWVVcmwiLCJhcHAiLCJtYXhCdWZmZXJpbmciLCJFcnJvciIsInF1ZXJ5UGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwiZmFsX2p3dF90b2tlbiIsInNldCIsInRvRml4ZWQiLCJhcHBJZCIsImVuc3VyZUFwcElkRm9ybWF0IiwiYXBwQWxpYXMiLCJzcGxpdCIsInN1ZmZpeCIsImluY2x1ZGVzIiwidG9TdHJpbmciLCJUT0tFTl9FWFBJUkFUSU9OX1NFQ09ORFMiLCJERUZBVUxUX1RIUk9UVExFX0lOVEVSVkFMIiwidmFsdWVzIiwic29tZSIsIkJsb2IiLCJBcnJheUJ1ZmZlciIsImdldFRva2VuIiwiZGlzcGF0Y2hSZXF1ZXN0IiwiZ2V0UmVzdEFwaVVybCIsImFsbG93ZWRfYXBwcyIsInRva2VuX2V4cGlyYXRpb24iLCJpc1VuYXV0aG9yaXplZEVycm9yIiwiV2ViU29ja2V0RXJyb3JDb2RlcyIsIk5PUk1BTF9DTE9TVVJFIiwiR09JTkdfQVdBWSIsImNvbm5lY3Rpb25DYWNoZSIsIk1hcCIsImNvbm5lY3Rpb25DYWxsYmFja3MiLCJyZXVzZUludGVycHJldGVyIiwia2V5IiwidGhyb3R0bGVJbnRlcnZhbCIsIm9uQ2hhbmdlIiwiaGFzIiwibWFjaGluZSIsImludGVycHJldCIsInRocm90dGxlZFNlbmQiLCJ0aHJvdHRsZSIsImdldCIsIm5vb3AiLCJOb09wQ29ubmVjdGlvbiIsImlzU3VjY2Vzc2Z1bFJlc3VsdCIsImRhdGEiLCJzdGF0dXMiLCJ0eXBlIiwiaXNGYWxFcnJvclJlc3VsdCIsImNvbm5lY3QiLCJoYW5kbGVyIiwiY2xpZW50T25seSIsImlzUmVhY3QiLCJpc0Jyb3dzZXIiLCJjb25uZWN0aW9uS2V5IiwiZGVmYXVsdCIsInByZXZpb3VzU3RhdGUiLCJvbkVycm9yIiwib25SZXN1bHQiLCJnZXRDYWxsYmFja3MiLCJzdGF0ZU1hY2hpbmUiLCJjdXJyZW50IiwidG9rZW5FeHBpcmF0aW9uVGltZW91dCIsIk1hdGgiLCJyb3VuZCIsInNldFRpbWVvdXQiLCJjYXRjaCIsImVycm9yIiwid3MiLCJvbm9wZW4iLCJvbmNsb3NlIiwiY29kZSIsIkFwaUVycm9yIiwicmVhc29uIiwib25lcnJvciIsIm9ubWVzc2FnZSIsImRlY29kZSIsImFycmF5QnVmZmVyIiwiYnVmZmVyIiwicGFyc2UiLCJib2R5IiwiaW5wdXQiLCJfYSIsInJlcXVlc3RfaWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fal-ai/serverless-client/src/realtime.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fal-ai/serverless-client/src/request.js":
/*!***************************************************************!*\
  !*** ./node_modules/@fal-ai/serverless-client/src/request.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __awaiter = (void 0) && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.dispatchRequest = void 0;\nconst config_1 = __webpack_require__(/*! ./config */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/config.js\");\nconst runtime_1 = __webpack_require__(/*! ./runtime */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/runtime.js\");\nconst isCloudflareWorkers = typeof navigator !== \"undefined\" && (navigator === null || navigator === void 0 ? void 0 : navigator.userAgent) === \"Cloudflare-Workers\";\nfunction dispatchRequest(method, targetUrl, input) {\n    return __awaiter(this, void 0, void 0, function*() {\n        const { credentials: credentialsValue, requestMiddleware, responseHandler } = (0, config_1.getConfig)();\n        const userAgent = (0, runtime_1.isBrowser)() ? {} : {\n            \"User-Agent\": (0, runtime_1.getUserAgent)()\n        };\n        const credentials = typeof credentialsValue === \"function\" ? credentialsValue() : credentialsValue;\n        const { url, headers } = yield requestMiddleware({\n            url: targetUrl\n        });\n        const authHeader = credentials ? {\n            Authorization: `Key ${credentials}`\n        } : {};\n        if (false) {}\n        const requestHeaders = Object.assign(Object.assign(Object.assign(Object.assign({}, authHeader), {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\"\n        }), userAgent), headers !== null && headers !== void 0 ? headers : {});\n        const response = yield fetch(url, Object.assign(Object.assign({\n            method,\n            headers: requestHeaders\n        }, !isCloudflareWorkers && {\n            mode: \"cors\"\n        }), {\n            body: method.toLowerCase() !== \"get\" && input ? JSON.stringify(input) : undefined\n        }));\n        return yield responseHandler(response);\n    });\n}\nexports.dispatchRequest = dispatchRequest; //# sourceMappingURL=request.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9zZXJ2ZXJsZXNzLWNsaWVudC9zcmMvcmVxdWVzdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLFlBQVksQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxTQUFTLElBQUssU0FBVUMsT0FBTyxFQUFFQyxVQUFVLEVBQUVDLENBQUMsRUFBRUMsU0FBUztJQUNuRixTQUFTQyxNQUFNQyxLQUFLO1FBQUksT0FBT0EsaUJBQWlCSCxJQUFJRyxRQUFRLElBQUlILEVBQUUsU0FBVUksT0FBTztZQUFJQSxRQUFRRDtRQUFRO0lBQUk7SUFDM0csT0FBTyxJQUFLSCxDQUFBQSxLQUFNQSxDQUFBQSxJQUFJSyxPQUFNLENBQUMsRUFBRyxTQUFVRCxPQUFPLEVBQUVFLE1BQU07UUFDckQsU0FBU0MsVUFBVUosS0FBSztZQUFJLElBQUk7Z0JBQUVLLEtBQUtQLFVBQVVRLElBQUksQ0FBQ047WUFBUyxFQUFFLE9BQU9PLEdBQUc7Z0JBQUVKLE9BQU9JO1lBQUk7UUFBRTtRQUMxRixTQUFTQyxTQUFTUixLQUFLO1lBQUksSUFBSTtnQkFBRUssS0FBS1AsU0FBUyxDQUFDLFFBQVEsQ0FBQ0U7WUFBUyxFQUFFLE9BQU9PLEdBQUc7Z0JBQUVKLE9BQU9JO1lBQUk7UUFBRTtRQUM3RixTQUFTRixLQUFLSSxNQUFNO1lBQUlBLE9BQU9DLElBQUksR0FBR1QsUUFBUVEsT0FBT1QsS0FBSyxJQUFJRCxNQUFNVSxPQUFPVCxLQUFLLEVBQUVXLElBQUksQ0FBQ1AsV0FBV0k7UUFBVztRQUM3R0gsS0FBSyxDQUFDUCxZQUFZQSxVQUFVYyxLQUFLLENBQUNqQixTQUFTQyxjQUFjLEVBQUUsR0FBR1UsSUFBSTtJQUN0RTtBQUNKO0FBQ0FPLDhDQUE2QztJQUFFYixPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdEZSx1QkFBdUIsR0FBRyxLQUFLO0FBQy9CLE1BQU1FLFdBQVdDLG1CQUFPQSxDQUFDLDhFQUFVO0FBQ25DLE1BQU1DLFlBQVlELG1CQUFPQSxDQUFDLGdGQUFXO0FBQ3JDLE1BQU1FLHNCQUFzQixPQUFPQyxjQUFjLGVBQzdDLENBQUNBLGNBQWMsUUFBUUEsY0FBYyxLQUFLLElBQUksS0FBSyxJQUFJQSxVQUFVQyxTQUFTLE1BQU07QUFDcEYsU0FBU04sZ0JBQWdCTyxNQUFNLEVBQUVDLFNBQVMsRUFBRUMsS0FBSztJQUM3QyxPQUFPL0IsVUFBVSxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRztRQUNuQyxNQUFNLEVBQUVnQyxhQUFhQyxnQkFBZ0IsRUFBRUMsaUJBQWlCLEVBQUVDLGVBQWUsRUFBRyxHQUFHLENBQUMsR0FBR1osU0FBU2EsU0FBUztRQUNyRyxNQUFNUixZQUFZLENBQUMsR0FBR0gsVUFBVVksU0FBUyxNQUFNLENBQUMsSUFBSTtZQUFFLGNBQWMsQ0FBQyxHQUFHWixVQUFVYSxZQUFZO1FBQUk7UUFDbEcsTUFBTU4sY0FBYyxPQUFPQyxxQkFBcUIsYUFDMUNBLHFCQUNBQTtRQUNOLE1BQU0sRUFBRU0sR0FBRyxFQUFFQyxPQUFPLEVBQUUsR0FBRyxNQUFNTixrQkFBa0I7WUFDN0NLLEtBQUtUO1FBQ1Q7UUFDQSxNQUFNVyxhQUFhVCxjQUFjO1lBQUVVLGVBQWUsQ0FBQyxJQUFJLEVBQUVWLFlBQVksQ0FBQztRQUFDLElBQUksQ0FBQztRQUM1RSxJQUFJLEtBQTRDQSxFQUFFLEVBR2pEO1FBQ0QsTUFBTWEsaUJBQWlCMUIsT0FBTzJCLE1BQU0sQ0FBQzNCLE9BQU8yQixNQUFNLENBQUMzQixPQUFPMkIsTUFBTSxDQUFDM0IsT0FBTzJCLE1BQU0sQ0FBQyxDQUFDLEdBQUdMLGFBQWE7WUFBRU0sUUFBUTtZQUFvQixnQkFBZ0I7UUFBbUIsSUFBSW5CLFlBQWFZLFlBQVksUUFBUUEsWUFBWSxLQUFLLElBQUlBLFVBQVUsQ0FBQztRQUN0TyxNQUFNUSxXQUFXLE1BQU1DLE1BQU1WLEtBQUtwQixPQUFPMkIsTUFBTSxDQUFDM0IsT0FBTzJCLE1BQU0sQ0FBQztZQUFFakI7WUFBUVcsU0FBU0s7UUFBZSxHQUFJLENBQUNuQix1QkFBdUI7WUFBRXdCLE1BQU07UUFBTyxJQUFLO1lBQUVDLE1BQU10QixPQUFPdUIsV0FBVyxPQUFPLFNBQVNyQixRQUNoTHNCLEtBQUtDLFNBQVMsQ0FBQ3ZCLFNBQ2Z3QjtRQUFVO1FBQ3BCLE9BQU8sTUFBTXBCLGdCQUFnQmE7SUFDakM7QUFDSjtBQUNBM0IsdUJBQXVCLEdBQUdDLGlCQUMxQixtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tbGItYWlwaG90by8uL25vZGVfbW9kdWxlcy9AZmFsLWFpL3NlcnZlcmxlc3MtY2xpZW50L3NyYy9yZXF1ZXN0LmpzP2ZiYTMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGlzcGF0Y2hSZXF1ZXN0ID0gdm9pZCAwO1xuY29uc3QgY29uZmlnXzEgPSByZXF1aXJlKFwiLi9jb25maWdcIik7XG5jb25zdCBydW50aW1lXzEgPSByZXF1aXJlKFwiLi9ydW50aW1lXCIpO1xuY29uc3QgaXNDbG91ZGZsYXJlV29ya2VycyA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmXG4gICAgKG5hdmlnYXRvciA9PT0gbnVsbCB8fCBuYXZpZ2F0b3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG5hdmlnYXRvci51c2VyQWdlbnQpID09PSAnQ2xvdWRmbGFyZS1Xb3JrZXJzJztcbmZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChtZXRob2QsIHRhcmdldFVybCwgaW5wdXQpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBjb25zdCB7IGNyZWRlbnRpYWxzOiBjcmVkZW50aWFsc1ZhbHVlLCByZXF1ZXN0TWlkZGxld2FyZSwgcmVzcG9uc2VIYW5kbGVyLCB9ID0gKDAsIGNvbmZpZ18xLmdldENvbmZpZykoKTtcbiAgICAgICAgY29uc3QgdXNlckFnZW50ID0gKDAsIHJ1bnRpbWVfMS5pc0Jyb3dzZXIpKCkgPyB7fSA6IHsgJ1VzZXItQWdlbnQnOiAoMCwgcnVudGltZV8xLmdldFVzZXJBZ2VudCkoKSB9O1xuICAgICAgICBjb25zdCBjcmVkZW50aWFscyA9IHR5cGVvZiBjcmVkZW50aWFsc1ZhbHVlID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICA/IGNyZWRlbnRpYWxzVmFsdWUoKVxuICAgICAgICAgICAgOiBjcmVkZW50aWFsc1ZhbHVlO1xuICAgICAgICBjb25zdCB7IHVybCwgaGVhZGVycyB9ID0geWllbGQgcmVxdWVzdE1pZGRsZXdhcmUoe1xuICAgICAgICAgICAgdXJsOiB0YXJnZXRVcmwsXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBhdXRoSGVhZGVyID0gY3JlZGVudGlhbHMgPyB7IEF1dGhvcml6YXRpb246IGBLZXkgJHtjcmVkZW50aWFsc31gIH0gOiB7fTtcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIGNyZWRlbnRpYWxzKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJUaGUgZmFsIGNyZWRlbnRpYWxzIGFyZSBleHBvc2VkIGluIHRoZSBicm93c2VyJ3MgZW52aXJvbm1lbnQuIFwiICtcbiAgICAgICAgICAgICAgICBcIlRoYXQncyBub3QgcmVjb21tZW5kZWQgZm9yIHByb2R1Y3Rpb24gdXNlIGNhc2VzLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXF1ZXN0SGVhZGVycyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGF1dGhIZWFkZXIpLCB7IEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nLCAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0pLCB1c2VyQWdlbnQpLCAoaGVhZGVycyAhPT0gbnVsbCAmJiBoZWFkZXJzICE9PSB2b2lkIDAgPyBoZWFkZXJzIDoge30pKTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCBmZXRjaCh1cmwsIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7IG1ldGhvZCwgaGVhZGVyczogcmVxdWVzdEhlYWRlcnMgfSwgKCFpc0Nsb3VkZmxhcmVXb3JrZXJzICYmIHsgbW9kZTogJ2NvcnMnIH0pKSwgeyBib2R5OiBtZXRob2QudG9Mb3dlckNhc2UoKSAhPT0gJ2dldCcgJiYgaW5wdXRcbiAgICAgICAgICAgICAgICA/IEpTT04uc3RyaW5naWZ5KGlucHV0KVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkIH0pKTtcbiAgICAgICAgcmV0dXJuIHlpZWxkIHJlc3BvbnNlSGFuZGxlcihyZXNwb25zZSk7XG4gICAgfSk7XG59XG5leHBvcnRzLmRpc3BhdGNoUmVxdWVzdCA9IGRpc3BhdGNoUmVxdWVzdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlcXVlc3QuanMubWFwIl0sIm5hbWVzIjpbIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsImFkb3B0IiwidmFsdWUiLCJyZXNvbHZlIiwiUHJvbWlzZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJhcHBseSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsImRpc3BhdGNoUmVxdWVzdCIsImNvbmZpZ18xIiwicmVxdWlyZSIsInJ1bnRpbWVfMSIsImlzQ2xvdWRmbGFyZVdvcmtlcnMiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJtZXRob2QiLCJ0YXJnZXRVcmwiLCJpbnB1dCIsImNyZWRlbnRpYWxzIiwiY3JlZGVudGlhbHNWYWx1ZSIsInJlcXVlc3RNaWRkbGV3YXJlIiwicmVzcG9uc2VIYW5kbGVyIiwiZ2V0Q29uZmlnIiwiaXNCcm93c2VyIiwiZ2V0VXNlckFnZW50IiwidXJsIiwiaGVhZGVycyIsImF1dGhIZWFkZXIiLCJBdXRob3JpemF0aW9uIiwiY29uc29sZSIsIndhcm4iLCJyZXF1ZXN0SGVhZGVycyIsImFzc2lnbiIsIkFjY2VwdCIsInJlc3BvbnNlIiwiZmV0Y2giLCJtb2RlIiwiYm9keSIsInRvTG93ZXJDYXNlIiwiSlNPTiIsInN0cmluZ2lmeSIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fal-ai/serverless-client/src/request.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fal-ai/serverless-client/src/response.js":
/*!****************************************************************!*\
  !*** ./node_modules/@fal-ai/serverless-client/src/response.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nvar __awaiter = (void 0) && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.defaultResponseHandler = exports.ValidationError = exports.ApiError = void 0;\nclass ApiError extends Error {\n    constructor({ message, status, body }){\n        super(message);\n        this.name = \"ApiError\";\n        this.status = status;\n        this.body = body;\n    }\n}\nexports.ApiError = ApiError;\nclass ValidationError extends ApiError {\n    constructor(args){\n        super(args);\n        this.name = \"ValidationError\";\n    }\n    get fieldErrors() {\n        // NOTE: this is a hack to support both FastAPI/Pydantic errors\n        // and some custom 422 errors that might not be in the Pydantic format.\n        if (typeof this.body.detail === \"string\") {\n            return [\n                {\n                    loc: [\n                        \"body\"\n                    ],\n                    msg: this.body.detail,\n                    type: \"value_error\"\n                }\n            ];\n        }\n        return this.body.detail || [];\n    }\n    getFieldErrors(field) {\n        return this.fieldErrors.filter((error)=>error.loc[error.loc.length - 1] === field);\n    }\n}\nexports.ValidationError = ValidationError;\nfunction defaultResponseHandler(response) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function*() {\n        const { status, statusText } = response;\n        const contentType = (_a = response.headers.get(\"Content-Type\")) !== null && _a !== void 0 ? _a : \"\";\n        if (!response.ok) {\n            if (contentType.includes(\"application/json\")) {\n                const body = yield response.json();\n                const ErrorType = status === 422 ? ValidationError : ApiError;\n                throw new ErrorType({\n                    message: body.message || statusText,\n                    status,\n                    body\n                });\n            }\n            throw new ApiError({\n                message: `HTTP ${status}: ${statusText}`,\n                status\n            });\n        }\n        if (contentType.includes(\"application/json\")) {\n            return response.json();\n        }\n        if (contentType.includes(\"text/html\")) {\n            return response.text();\n        }\n        if (contentType.includes(\"application/octet-stream\")) {\n            return response.arrayBuffer();\n        }\n        // TODO convert to either number or bool automatically\n        return response.text();\n    });\n}\nexports.defaultResponseHandler = defaultResponseHandler; //# sourceMappingURL=response.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fal-ai/serverless-client/src/response.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fal-ai/serverless-client/src/runtime.js":
/*!***************************************************************!*\
  !*** ./node_modules/@fal-ai/serverless-client/src/runtime.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* eslint-disable @typescript-eslint/no-var-requires */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getUserAgent = exports.isBrowser = void 0;\nfunction isBrowser() {\n    return  false && 0;\n}\nexports.isBrowser = isBrowser;\nlet memoizedUserAgent = null;\nfunction getUserAgent() {\n    if (memoizedUserAgent !== null) {\n        return memoizedUserAgent;\n    }\n    const packageInfo = __webpack_require__(/*! ../package.json */ \"(ssr)/./node_modules/@fal-ai/serverless-client/package.json\");\n    memoizedUserAgent = `${packageInfo.name}/${packageInfo.version}`;\n    return memoizedUserAgent;\n}\nexports.getUserAgent = getUserAgent; //# sourceMappingURL=runtime.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9zZXJ2ZXJsZXNzLWNsaWVudC9zcmMvcnVudGltZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLHFEQUFxRCxHQUNyREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG9CQUFvQixHQUFHQSxpQkFBaUIsR0FBRyxLQUFLO0FBQ2hELFNBQVNHO0lBQ0wsT0FBUSxNQUFrQixJQUFlLENBQTJCO0FBQ3hFO0FBQ0FILGlCQUFpQixHQUFHRztBQUNwQixJQUFJRyxvQkFBb0I7QUFDeEIsU0FBU0o7SUFDTCxJQUFJSSxzQkFBc0IsTUFBTTtRQUM1QixPQUFPQTtJQUNYO0lBQ0EsTUFBTUMsY0FBY0MsbUJBQU9BLENBQUM7SUFDNUJGLG9CQUFvQixDQUFDLEVBQUVDLFlBQVlFLElBQUksQ0FBQyxDQUFDLEVBQUVGLFlBQVlHLE9BQU8sQ0FBQyxDQUFDO0lBQ2hFLE9BQU9KO0FBQ1g7QUFDQU4sb0JBQW9CLEdBQUdFLGNBQ3ZCLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL21sYi1haXBob3RvLy4vbm9kZV9tb2R1bGVzL0BmYWwtYWkvc2VydmVybGVzcy1jbGllbnQvc3JjL3J1bnRpbWUuanM/ODZhNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby12YXItcmVxdWlyZXMgKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0VXNlckFnZW50ID0gZXhwb3J0cy5pc0Jyb3dzZXIgPSB2b2lkIDA7XG5mdW5jdGlvbiBpc0Jyb3dzZXIoKSB7XG4gICAgcmV0dXJuICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyk7XG59XG5leHBvcnRzLmlzQnJvd3NlciA9IGlzQnJvd3NlcjtcbmxldCBtZW1vaXplZFVzZXJBZ2VudCA9IG51bGw7XG5mdW5jdGlvbiBnZXRVc2VyQWdlbnQoKSB7XG4gICAgaWYgKG1lbW9pemVkVXNlckFnZW50ICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBtZW1vaXplZFVzZXJBZ2VudDtcbiAgICB9XG4gICAgY29uc3QgcGFja2FnZUluZm8gPSByZXF1aXJlKCcuLi9wYWNrYWdlLmpzb24nKTtcbiAgICBtZW1vaXplZFVzZXJBZ2VudCA9IGAke3BhY2thZ2VJbmZvLm5hbWV9LyR7cGFja2FnZUluZm8udmVyc2lvbn1gO1xuICAgIHJldHVybiBtZW1vaXplZFVzZXJBZ2VudDtcbn1cbmV4cG9ydHMuZ2V0VXNlckFnZW50ID0gZ2V0VXNlckFnZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cnVudGltZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJnZXRVc2VyQWdlbnQiLCJpc0Jyb3dzZXIiLCJ3aW5kb3ciLCJkb2N1bWVudCIsIm1lbW9pemVkVXNlckFnZW50IiwicGFja2FnZUluZm8iLCJyZXF1aXJlIiwibmFtZSIsInZlcnNpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fal-ai/serverless-client/src/runtime.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fal-ai/serverless-client/src/storage.js":
/*!***************************************************************!*\
  !*** ./node_modules/@fal-ai/serverless-client/src/storage.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __awaiter = (void 0) && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.storageImpl = void 0;\nconst config_1 = __webpack_require__(/*! ./config */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/config.js\");\nconst request_1 = __webpack_require__(/*! ./request */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/request.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/utils.js\");\nfunction isDataUri(uri) {\n    // avoid uri parsing if it doesn't start with data:\n    if (!uri.startsWith(\"data:\")) {\n        return false;\n    }\n    try {\n        const url = new URL(uri);\n        return url.protocol === \"data:\";\n    } catch (_) {\n        return false;\n    }\n}\n/**\n * Get the file extension from the content type. This is used to generate\n * a file name if the file name is not provided.\n *\n * @param contentType the content type of the file.\n * @returns the file extension or `bin` if the content type is not recognized.\n */ function getExtensionFromContentType(contentType) {\n    var _a;\n    const [_, fileType] = contentType.split(\"/\");\n    return (_a = fileType.split(/[-;]/)[0]) !== null && _a !== void 0 ? _a : \"bin\";\n}\n/**\n * Initiate the upload of a file to the server. This returns the URL to upload\n * the file to and the URL of the file once it is uploaded.\n *\n * @param file the file to upload\n * @returns the URL to upload the file to and the URL of the file once it is uploaded.\n */ function initiateUpload(file) {\n    return __awaiter(this, void 0, void 0, function*() {\n        const contentType = file.type || \"application/octet-stream\";\n        const filename = file.name || `${Date.now()}.${getExtensionFromContentType(contentType)}`;\n        return yield (0, request_1.dispatchRequest)(\"POST\", `${(0, config_1.getRestApiUrl)()}/storage/upload/initiate`, {\n            content_type: contentType,\n            file_name: filename\n        });\n    });\n}\nexports.storageImpl = {\n    upload: (file)=>__awaiter(void 0, void 0, void 0, function*() {\n            const { upload_url: uploadUrl, file_url: url } = yield initiateUpload(file);\n            const response = yield fetch(uploadUrl, {\n                method: \"PUT\",\n                body: file,\n                headers: {\n                    \"Content-Type\": file.type || \"application/octet-stream\"\n                }\n            });\n            const { responseHandler } = (0, config_1.getConfig)();\n            yield responseHandler(response);\n            return url;\n        }),\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    transformInput: (input)=>__awaiter(void 0, void 0, void 0, function*() {\n            const promises = Object.entries(input).map(([key, value])=>__awaiter(void 0, void 0, void 0, function*() {\n                    if (value instanceof Blob || typeof value === \"string\" && isDataUri(value)) {\n                        let blob = value;\n                        // if string is a data uri, convert to blob\n                        if (typeof value === \"string\" && isDataUri(value)) {\n                            const response = yield fetch(value);\n                            blob = yield response.blob();\n                        }\n                        const url = yield exports.storageImpl.upload(blob);\n                        return [\n                            key,\n                            url\n                        ];\n                    }\n                    if ((0, utils_1.isPlainObject)(value)) {\n                        return [\n                            key,\n                            (yield exports.storageImpl.transformInput(value))\n                        ];\n                    }\n                    return [\n                        key,\n                        value\n                    ];\n                }));\n            const results = yield Promise.all(promises);\n            return Object.fromEntries(results);\n        })\n}; //# sourceMappingURL=storage.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fal-ai/serverless-client/src/storage.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fal-ai/serverless-client/src/utils.js":
/*!*************************************************************!*\
  !*** ./node_modules/@fal-ai/serverless-client/src/utils.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isPlainObject = exports.isReact = exports.throttle = exports.isValidUrl = exports.ensureAppIdFormat = exports.isUUIDv4 = void 0;\nfunction isUUIDv4(id) {\n    return typeof id === \"string\" && id.length === 36 && id[14] === \"4\" && [\n        \"8\",\n        \"9\",\n        \"a\",\n        \"b\"\n    ].includes(id[19]);\n}\nexports.isUUIDv4 = isUUIDv4;\nfunction ensureAppIdFormat(id) {\n    const parts = id.split(\"/\");\n    if (parts.length > 1) {\n        return id;\n    }\n    const [, appOwner, appId] = /^([0-9]+)-([a-zA-Z0-9-]+)$/.exec(id) || [];\n    if (appOwner && appId) {\n        return `${appOwner}/${appId}`;\n    }\n    throw new Error(`Invalid app id: ${id}. Must be in the format <appOwner>/<appId>`);\n}\nexports.ensureAppIdFormat = ensureAppIdFormat;\nfunction isValidUrl(url) {\n    try {\n        const { host } = new URL(url);\n        return /(fal\\.(ai|run))$/.test(host);\n    } catch (_) {\n        return false;\n    }\n}\nexports.isValidUrl = isValidUrl;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction throttle(func, limit, leading = false) {\n    let lastFunc;\n    let lastRan;\n    return (...args)=>{\n        if (!lastRan && leading) {\n            func(...args);\n            lastRan = Date.now();\n        } else {\n            if (lastFunc) {\n                clearTimeout(lastFunc);\n            }\n            lastFunc = setTimeout(()=>{\n                if (Date.now() - lastRan >= limit) {\n                    func(...args);\n                    lastRan = Date.now();\n                }\n            }, limit - (Date.now() - lastRan));\n        }\n    };\n}\nexports.throttle = throttle;\nlet isRunningInReact;\n/**\n * Not really the most optimal way to detect if we're running in React,\n * but the idea here is that we can support multiple rendering engines\n * (starting with React), with all their peculiarities, without having\n * to add a dependency or creating custom integrations (e.g. custom hooks).\n *\n * Yes, a bit of magic to make things works out-of-the-box.\n * @returns `true` if running in React, `false` otherwise.\n */ function isReact() {\n    if (isRunningInReact === undefined) {\n        const stack = new Error().stack;\n        isRunningInReact = !!stack && (stack.includes(\"node_modules/react-dom/\") || stack.includes(\"node_modules/next/\"));\n    }\n    return isRunningInReact;\n}\nexports.isReact = isReact;\n/**\n * Check if a value is a plain object.\n * @param value - The value to check.\n * @returns `true` if the value is a plain object, `false` otherwise.\n */ function isPlainObject(value) {\n    return !!value && Object.getPrototypeOf(value) === Object.prototype;\n}\nexports.isPlainObject = isPlainObject; //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9zZXJ2ZXJsZXNzLWNsaWVudC9zcmMvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHFCQUFxQixHQUFHQSxlQUFlLEdBQUdBLGdCQUFnQixHQUFHQSxrQkFBa0IsR0FBR0EseUJBQXlCLEdBQUdBLGdCQUFnQixHQUFHLEtBQUs7QUFDdEksU0FBU08sU0FBU0MsRUFBRTtJQUNoQixPQUFRLE9BQU9BLE9BQU8sWUFDbEJBLEdBQUdDLE1BQU0sS0FBSyxNQUNkRCxFQUFFLENBQUMsR0FBRyxLQUFLLE9BQ1g7UUFBQztRQUFLO1FBQUs7UUFBSztLQUFJLENBQUNFLFFBQVEsQ0FBQ0YsRUFBRSxDQUFDLEdBQUc7QUFDNUM7QUFDQVIsZ0JBQWdCLEdBQUdPO0FBQ25CLFNBQVNELGtCQUFrQkUsRUFBRTtJQUN6QixNQUFNRyxRQUFRSCxHQUFHSSxLQUFLLENBQUM7SUFDdkIsSUFBSUQsTUFBTUYsTUFBTSxHQUFHLEdBQUc7UUFDbEIsT0FBT0Q7SUFDWDtJQUNBLE1BQU0sR0FBR0ssVUFBVUMsTUFBTSxHQUFHLDZCQUE2QkMsSUFBSSxDQUFDUCxPQUFPLEVBQUU7SUFDdkUsSUFBSUssWUFBWUMsT0FBTztRQUNuQixPQUFPLENBQUMsRUFBRUQsU0FBUyxDQUFDLEVBQUVDLE1BQU0sQ0FBQztJQUNqQztJQUNBLE1BQU0sSUFBSUUsTUFBTSxDQUFDLGdCQUFnQixFQUFFUixHQUFHLDBDQUEwQyxDQUFDO0FBQ3JGO0FBQ0FSLHlCQUF5QixHQUFHTTtBQUM1QixTQUFTRCxXQUFXWSxHQUFHO0lBQ25CLElBQUk7UUFDQSxNQUFNLEVBQUVDLElBQUksRUFBRSxHQUFHLElBQUlDLElBQUlGO1FBQ3pCLE9BQU8sbUJBQW1CRyxJQUFJLENBQUNGO0lBQ25DLEVBQ0EsT0FBT0csR0FBRztRQUNOLE9BQU87SUFDWDtBQUNKO0FBQ0FyQixrQkFBa0IsR0FBR0s7QUFDckIsOERBQThEO0FBQzlELFNBQVNELFNBQVNrQixJQUFJLEVBQUVDLEtBQUssRUFBRUMsVUFBVSxLQUFLO0lBQzFDLElBQUlDO0lBQ0osSUFBSUM7SUFDSixPQUFPLENBQUMsR0FBR0M7UUFDUCxJQUFJLENBQUNELFdBQVdGLFNBQVM7WUFDckJGLFFBQVFLO1lBQ1JELFVBQVVFLEtBQUtDLEdBQUc7UUFDdEIsT0FDSztZQUNELElBQUlKLFVBQVU7Z0JBQ1ZLLGFBQWFMO1lBQ2pCO1lBQ0FBLFdBQVdNLFdBQVc7Z0JBQ2xCLElBQUlILEtBQUtDLEdBQUcsS0FBS0gsV0FBV0gsT0FBTztvQkFDL0JELFFBQVFLO29CQUNSRCxVQUFVRSxLQUFLQyxHQUFHO2dCQUN0QjtZQUNKLEdBQUdOLFFBQVNLLENBQUFBLEtBQUtDLEdBQUcsS0FBS0gsT0FBTTtRQUNuQztJQUNKO0FBQ0o7QUFDQTFCLGdCQUFnQixHQUFHSTtBQUNuQixJQUFJNEI7QUFDSjs7Ozs7Ozs7Q0FRQyxHQUNELFNBQVM3QjtJQUNMLElBQUk2QixxQkFBcUJDLFdBQVc7UUFDaEMsTUFBTUMsUUFBUSxJQUFJbEIsUUFBUWtCLEtBQUs7UUFDL0JGLG1CQUNJLENBQUMsQ0FBQ0UsU0FDR0EsQ0FBQUEsTUFBTXhCLFFBQVEsQ0FBQyw4QkFDWndCLE1BQU14QixRQUFRLENBQUMscUJBQW9CO0lBQ25EO0lBQ0EsT0FBT3NCO0FBQ1g7QUFDQWhDLGVBQWUsR0FBR0c7QUFDbEI7Ozs7Q0FJQyxHQUNELFNBQVNELGNBQWNELEtBQUs7SUFDeEIsT0FBTyxDQUFDLENBQUNBLFNBQVNILE9BQU9xQyxjQUFjLENBQUNsQyxXQUFXSCxPQUFPc0MsU0FBUztBQUN2RTtBQUNBcEMscUJBQXFCLEdBQUdFLGVBQ3hCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL21sYi1haXBob3RvLy4vbm9kZV9tb2R1bGVzL0BmYWwtYWkvc2VydmVybGVzcy1jbGllbnQvc3JjL3V0aWxzLmpzPzlhZDUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzUGxhaW5PYmplY3QgPSBleHBvcnRzLmlzUmVhY3QgPSBleHBvcnRzLnRocm90dGxlID0gZXhwb3J0cy5pc1ZhbGlkVXJsID0gZXhwb3J0cy5lbnN1cmVBcHBJZEZvcm1hdCA9IGV4cG9ydHMuaXNVVUlEdjQgPSB2b2lkIDA7XG5mdW5jdGlvbiBpc1VVSUR2NChpZCkge1xuICAgIHJldHVybiAodHlwZW9mIGlkID09PSAnc3RyaW5nJyAmJlxuICAgICAgICBpZC5sZW5ndGggPT09IDM2ICYmXG4gICAgICAgIGlkWzE0XSA9PT0gJzQnICYmXG4gICAgICAgIFsnOCcsICc5JywgJ2EnLCAnYiddLmluY2x1ZGVzKGlkWzE5XSkpO1xufVxuZXhwb3J0cy5pc1VVSUR2NCA9IGlzVVVJRHY0O1xuZnVuY3Rpb24gZW5zdXJlQXBwSWRGb3JtYXQoaWQpIHtcbiAgICBjb25zdCBwYXJ0cyA9IGlkLnNwbGl0KCcvJyk7XG4gICAgaWYgKHBhcnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgcmV0dXJuIGlkO1xuICAgIH1cbiAgICBjb25zdCBbLCBhcHBPd25lciwgYXBwSWRdID0gL14oWzAtOV0rKS0oW2EtekEtWjAtOS1dKykkLy5leGVjKGlkKSB8fCBbXTtcbiAgICBpZiAoYXBwT3duZXIgJiYgYXBwSWQpIHtcbiAgICAgICAgcmV0dXJuIGAke2FwcE93bmVyfS8ke2FwcElkfWA7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBhcHAgaWQ6ICR7aWR9LiBNdXN0IGJlIGluIHRoZSBmb3JtYXQgPGFwcE93bmVyPi88YXBwSWQ+YCk7XG59XG5leHBvcnRzLmVuc3VyZUFwcElkRm9ybWF0ID0gZW5zdXJlQXBwSWRGb3JtYXQ7XG5mdW5jdGlvbiBpc1ZhbGlkVXJsKHVybCkge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHsgaG9zdCB9ID0gbmV3IFVSTCh1cmwpO1xuICAgICAgICByZXR1cm4gLyhmYWxcXC4oYWl8cnVuKSkkLy50ZXN0KGhvc3QpO1xuICAgIH1cbiAgICBjYXRjaCAoXykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuZXhwb3J0cy5pc1ZhbGlkVXJsID0gaXNWYWxpZFVybDtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5mdW5jdGlvbiB0aHJvdHRsZShmdW5jLCBsaW1pdCwgbGVhZGluZyA9IGZhbHNlKSB7XG4gICAgbGV0IGxhc3RGdW5jO1xuICAgIGxldCBsYXN0UmFuO1xuICAgIHJldHVybiAoLi4uYXJncykgPT4ge1xuICAgICAgICBpZiAoIWxhc3RSYW4gJiYgbGVhZGluZykge1xuICAgICAgICAgICAgZnVuYyguLi5hcmdzKTtcbiAgICAgICAgICAgIGxhc3RSYW4gPSBEYXRlLm5vdygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGxhc3RGdW5jKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGxhc3RGdW5jKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3RGdW5jID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKERhdGUubm93KCkgLSBsYXN0UmFuID49IGxpbWl0KSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmMoLi4uYXJncyk7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RSYW4gPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGxpbWl0IC0gKERhdGUubm93KCkgLSBsYXN0UmFuKSk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuZXhwb3J0cy50aHJvdHRsZSA9IHRocm90dGxlO1xubGV0IGlzUnVubmluZ0luUmVhY3Q7XG4vKipcbiAqIE5vdCByZWFsbHkgdGhlIG1vc3Qgb3B0aW1hbCB3YXkgdG8gZGV0ZWN0IGlmIHdlJ3JlIHJ1bm5pbmcgaW4gUmVhY3QsXG4gKiBidXQgdGhlIGlkZWEgaGVyZSBpcyB0aGF0IHdlIGNhbiBzdXBwb3J0IG11bHRpcGxlIHJlbmRlcmluZyBlbmdpbmVzXG4gKiAoc3RhcnRpbmcgd2l0aCBSZWFjdCksIHdpdGggYWxsIHRoZWlyIHBlY3VsaWFyaXRpZXMsIHdpdGhvdXQgaGF2aW5nXG4gKiB0byBhZGQgYSBkZXBlbmRlbmN5IG9yIGNyZWF0aW5nIGN1c3RvbSBpbnRlZ3JhdGlvbnMgKGUuZy4gY3VzdG9tIGhvb2tzKS5cbiAqXG4gKiBZZXMsIGEgYml0IG9mIG1hZ2ljIHRvIG1ha2UgdGhpbmdzIHdvcmtzIG91dC1vZi10aGUtYm94LlxuICogQHJldHVybnMgYHRydWVgIGlmIHJ1bm5pbmcgaW4gUmVhY3QsIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICovXG5mdW5jdGlvbiBpc1JlYWN0KCkge1xuICAgIGlmIChpc1J1bm5pbmdJblJlYWN0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgICAgaXNSdW5uaW5nSW5SZWFjdCA9XG4gICAgICAgICAgICAhIXN0YWNrICYmXG4gICAgICAgICAgICAgICAgKHN0YWNrLmluY2x1ZGVzKCdub2RlX21vZHVsZXMvcmVhY3QtZG9tLycpIHx8XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrLmluY2x1ZGVzKCdub2RlX21vZHVsZXMvbmV4dC8nKSk7XG4gICAgfVxuICAgIHJldHVybiBpc1J1bm5pbmdJblJlYWN0O1xufVxuZXhwb3J0cy5pc1JlYWN0ID0gaXNSZWFjdDtcbi8qKlxuICogQ2hlY2sgaWYgYSB2YWx1ZSBpcyBhIHBsYWluIG9iamVjdC5cbiAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWUgaXMgYSBwbGFpbiBvYmplY3QsIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gICAgcmV0dXJuICEhdmFsdWUgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKSA9PT0gT2JqZWN0LnByb3RvdHlwZTtcbn1cbmV4cG9ydHMuaXNQbGFpbk9iamVjdCA9IGlzUGxhaW5PYmplY3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpc1BsYWluT2JqZWN0IiwiaXNSZWFjdCIsInRocm90dGxlIiwiaXNWYWxpZFVybCIsImVuc3VyZUFwcElkRm9ybWF0IiwiaXNVVUlEdjQiLCJpZCIsImxlbmd0aCIsImluY2x1ZGVzIiwicGFydHMiLCJzcGxpdCIsImFwcE93bmVyIiwiYXBwSWQiLCJleGVjIiwiRXJyb3IiLCJ1cmwiLCJob3N0IiwiVVJMIiwidGVzdCIsIl8iLCJmdW5jIiwibGltaXQiLCJsZWFkaW5nIiwibGFzdEZ1bmMiLCJsYXN0UmFuIiwiYXJncyIsIkRhdGUiLCJub3ciLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiaXNSdW5uaW5nSW5SZWFjdCIsInVuZGVmaW5lZCIsInN0YWNrIiwiZ2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fal-ai/serverless-client/src/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@fal-ai/serverless-proxy/src/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@fal-ai/serverless-proxy/src/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.fromHeaders = exports.handleRequest = exports.DEFAULT_PROXY_ROUTE = exports.TARGET_URL_HEADER = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nexports.TARGET_URL_HEADER = \"x-fal-target-url\";\nexports.DEFAULT_PROXY_ROUTE = \"/api/fal/proxy\";\nconst FAL_KEY = process.env.FAL_KEY;\nconst FAL_KEY_ID = process.env.FAL_KEY_ID;\nconst FAL_KEY_SECRET = process.env.FAL_KEY_SECRET;\nconst FAL_URL_REG_EXP = /(\\.|^)fal\\.(run|ai)$/;\n/**\n * Utility to get a header value as `string` from a Headers object.\n *\n * @private\n * @param request the header value.\n * @returns the header value as `string` or `undefined` if the header is not set.\n */ function singleHeaderValue(value) {\n    if (!value) {\n        return undefined;\n    }\n    if (Array.isArray(value)) {\n        return value[0];\n    }\n    return value;\n}\nfunction getFalKey() {\n    if (FAL_KEY) {\n        return FAL_KEY;\n    }\n    if (FAL_KEY_ID && FAL_KEY_SECRET) {\n        return `${FAL_KEY_ID}:${FAL_KEY_SECRET}`;\n    }\n    return undefined;\n}\nconst EXCLUDED_HEADERS = [\n    \"content-length\",\n    \"content-encoding\"\n];\n/**\n * A request handler that proxies the request to the fal-serverless\n * endpoint. This is useful so client-side calls to the fal-serverless endpoint\n * can be made without CORS issues and the correct credentials can be added\n * effortlessly.\n *\n * @param behavior the request proxy behavior.\n * @returns Promise<any> the promise that will be resolved once the request is done.\n */ function handleRequest(behavior) {\n    var _a, _b, _c;\n    return tslib_1.__awaiter(this, void 0, void 0, function*() {\n        const targetUrl = singleHeaderValue(behavior.getHeader(exports.TARGET_URL_HEADER));\n        if (!targetUrl) {\n            return behavior.respondWith(400, `Missing the ${exports.TARGET_URL_HEADER} header`);\n        }\n        const urlHost = new URL(targetUrl).host;\n        if (!FAL_URL_REG_EXP.test(urlHost)) {\n            return behavior.respondWith(412, `Invalid ${exports.TARGET_URL_HEADER} header`);\n        }\n        const falKey = behavior.resolveApiKey ? yield behavior.resolveApiKey() : getFalKey();\n        if (!falKey) {\n            return behavior.respondWith(401, \"Missing fal.ai credentials\");\n        }\n        // pass over headers prefixed with x-fal-*\n        const headers = {};\n        Object.keys(behavior.getHeaders()).forEach((key)=>{\n            if (key.toLowerCase().startsWith(\"x-fal-\")) {\n                headers[key.toLowerCase()] = behavior.getHeader(key);\n            }\n        });\n        const proxyUserAgent = `@fal-ai/serverless-proxy/${behavior.id}`;\n        const userAgent = singleHeaderValue(behavior.getHeader(\"user-agent\"));\n        const res = yield fetch(targetUrl, {\n            method: behavior.method,\n            headers: Object.assign(Object.assign({}, headers), {\n                authorization: (_a = singleHeaderValue(behavior.getHeader(\"authorization\"))) !== null && _a !== void 0 ? _a : `Key ${falKey}`,\n                accept: \"application/json\",\n                \"content-type\": \"application/json\",\n                \"user-agent\": userAgent,\n                \"x-fal-client-proxy\": proxyUserAgent\n            }),\n            body: ((_b = behavior.method) === null || _b === void 0 ? void 0 : _b.toUpperCase()) === \"GET\" ? undefined : yield behavior.getBody()\n        });\n        // copy headers from fal to the proxied response\n        res.headers.forEach((value, key)=>{\n            if (!EXCLUDED_HEADERS.includes(key.toLowerCase())) {\n                behavior.sendHeader(key, value);\n            }\n        });\n        if ((_c = res.headers.get(\"content-type\")) === null || _c === void 0 ? void 0 : _c.includes(\"application/json\")) {\n            const data = yield res.json();\n            return behavior.respondWith(res.status, data);\n        }\n        const data = yield res.text();\n        return behavior.respondWith(res.status, data);\n    });\n}\nexports.handleRequest = handleRequest;\nfunction fromHeaders(headers) {\n    // TODO once Header.entries() is available, use that instead\n    // Object.fromEntries(headers.entries());\n    const result = {};\n    headers.forEach((value, key)=>{\n        result[key] = value;\n    });\n    return result;\n}\nexports.fromHeaders = fromHeaders; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@fal-ai/serverless-proxy/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@fal-ai/serverless-proxy/src/nextjs.js":
/*!*************************************************************!*\
  !*** ./node_modules/@fal-ai/serverless-proxy/src/nextjs.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst NextResponse = (__webpack_require__(/*! next/dist/server/web/spec-extension/response */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/response.js\").NextResponse);\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.route = exports.handler = exports.PROXY_ROUTE = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nconst index_1 = __webpack_require__(/*! ./index */ \"(rsc)/./node_modules/@fal-ai/serverless-proxy/src/index.js\");\n/**\n * The default Next API route for the fal.ai client proxy.\n */ exports.PROXY_ROUTE = index_1.DEFAULT_PROXY_ROUTE;\n/**\n * The Next API route handler for the fal.ai client proxy.\n * Use it with the /pages router in Next.js.\n *\n * @param request the Next API request object.\n * @param response the Next API response object.\n * @returns a promise that resolves when the request is handled.\n */ const handler = (request, response)=>tslib_1.__awaiter(void 0, void 0, void 0, function*() {\n        return (0, index_1.handleRequest)({\n            id: \"nextjs-page-router\",\n            method: request.method || \"POST\",\n            respondWith: (status, data)=>response.status(status).json(data),\n            getHeaders: ()=>request.headers,\n            getHeader: (name)=>request.headers[name],\n            sendHeader: (name, value)=>response.setHeader(name, value),\n            getBody: ()=>tslib_1.__awaiter(void 0, void 0, void 0, function*() {\n                    return JSON.stringify(request.body);\n                })\n        });\n    });\nexports.handler = handler;\n/**\n * The Next API route handler for the fal.ai client proxy on App Router apps.\n *\n * @param request the Next API request object.\n * @returns a promise that resolves when the request is handled.\n */ function routeHandler(request) {\n    return tslib_1.__awaiter(this, void 0, void 0, function*() {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const responseHeaders = {};\n        return yield (0, index_1.handleRequest)({\n            id: \"nextjs-app-router\",\n            method: request.method,\n            respondWith: (status, data)=>NextResponse.json(data, {\n                    status,\n                    headers: responseHeaders\n                }),\n            getHeaders: ()=>(0, index_1.fromHeaders)(request.headers),\n            getHeader: (name)=>request.headers.get(name),\n            sendHeader: (name, value)=>responseHeaders[name] = value,\n            getBody: ()=>tslib_1.__awaiter(this, void 0, void 0, function*() {\n                    return request.text();\n                })\n        });\n    });\n}\nexports.route = {\n    handler: routeHandler,\n    GET: routeHandler,\n    POST: routeHandler\n}; //# sourceMappingURL=nextjs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9zZXJ2ZXJsZXNzLXByb3h5L3NyYy9uZXh0anMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxhQUFhLEdBQUdBLGVBQWUsR0FBR0EsbUJBQW1CLEdBQUcsS0FBSztBQUM3RCxNQUFNSyxVQUFVQyxtQkFBT0EsQ0FBQyx1REFBTztBQUUvQixNQUFNQyxVQUFVRCxtQkFBT0EsQ0FBQywyRUFBUztBQUNqQzs7Q0FFQyxHQUNETixtQkFBbUIsR0FBR08sUUFBUUMsbUJBQW1CO0FBQ2pEOzs7Ozs7O0NBT0MsR0FDRCxNQUFNTCxVQUFVLENBQUNNLFNBQVNDLFdBQWFMLFFBQVFNLFNBQVMsQ0FBQyxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRztRQUM3RSxPQUFPLENBQUMsR0FBR0osUUFBUUssYUFBYSxFQUFFO1lBQzlCQyxJQUFJO1lBQ0pDLFFBQVFMLFFBQVFLLE1BQU0sSUFBSTtZQUMxQkMsYUFBYSxDQUFDQyxRQUFRQyxPQUFTUCxTQUFTTSxNQUFNLENBQUNBLFFBQVFFLElBQUksQ0FBQ0Q7WUFDNURFLFlBQVksSUFBTVYsUUFBUVcsT0FBTztZQUNqQ0MsV0FBVyxDQUFDQyxPQUFTYixRQUFRVyxPQUFPLENBQUNFLEtBQUs7WUFDMUNDLFlBQVksQ0FBQ0QsTUFBTXJCLFFBQVVTLFNBQVNjLFNBQVMsQ0FBQ0YsTUFBTXJCO1lBQ3REd0IsU0FBUyxJQUFNcEIsUUFBUU0sU0FBUyxDQUFDLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHO29CQUFlLE9BQU9lLEtBQUtDLFNBQVMsQ0FBQ2xCLFFBQVFtQixJQUFJO2dCQUFHO1FBQ2pIO0lBQ0o7QUFDQTVCLGVBQWUsR0FBR0c7QUFDbEI7Ozs7O0NBS0MsR0FDRCxTQUFTMEIsYUFBYXBCLE9BQU87SUFDekIsT0FBT0osUUFBUU0sU0FBUyxDQUFDLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1FBQzNDLDhEQUE4RDtRQUM5RCxNQUFNbUIsa0JBQWtCLENBQUM7UUFDekIsT0FBTyxNQUFNLENBQUMsR0FBR3ZCLFFBQVFLLGFBQWEsRUFBRTtZQUNwQ0MsSUFBSTtZQUNKQyxRQUFRTCxRQUFRSyxNQUFNO1lBQ3RCQyxhQUFhLENBQUNDLFFBQVFDLE9BQVNjLGFBQXNCYixJQUFJLENBQUNELE1BQU07b0JBQzVERDtvQkFDQUksU0FBU1U7Z0JBQ2I7WUFDQVgsWUFBWSxJQUFNLENBQUMsR0FBR1osUUFBUXlCLFdBQVcsRUFBRXZCLFFBQVFXLE9BQU87WUFDMURDLFdBQVcsQ0FBQ0MsT0FBU2IsUUFBUVcsT0FBTyxDQUFDYSxHQUFHLENBQUNYO1lBQ3pDQyxZQUFZLENBQUNELE1BQU1yQixRQUFXNkIsZUFBZSxDQUFDUixLQUFLLEdBQUdyQjtZQUN0RHdCLFNBQVMsSUFBTXBCLFFBQVFNLFNBQVMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRztvQkFBZSxPQUFPRixRQUFReUIsSUFBSTtnQkFBSTtRQUNqRztJQUNKO0FBQ0o7QUFDQWxDLGFBQWEsR0FBRztJQUNaRyxTQUFTMEI7SUFDVE0sS0FBS047SUFDTE8sTUFBTVA7QUFDVixHQUNBLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL21sYi1haXBob3RvLy4vbm9kZV9tb2R1bGVzL0BmYWwtYWkvc2VydmVybGVzcy1wcm94eS9zcmMvbmV4dGpzLmpzPzI4NTMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJvdXRlID0gZXhwb3J0cy5oYW5kbGVyID0gZXhwb3J0cy5QUk9YWV9ST1VURSA9IHZvaWQgMDtcbmNvbnN0IHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG5jb25zdCBzZXJ2ZXJfMSA9IHJlcXVpcmUoXCJuZXh0L3NlcnZlclwiKTtcbmNvbnN0IGluZGV4XzEgPSByZXF1aXJlKFwiLi9pbmRleFwiKTtcbi8qKlxuICogVGhlIGRlZmF1bHQgTmV4dCBBUEkgcm91dGUgZm9yIHRoZSBmYWwuYWkgY2xpZW50IHByb3h5LlxuICovXG5leHBvcnRzLlBST1hZX1JPVVRFID0gaW5kZXhfMS5ERUZBVUxUX1BST1hZX1JPVVRFO1xuLyoqXG4gKiBUaGUgTmV4dCBBUEkgcm91dGUgaGFuZGxlciBmb3IgdGhlIGZhbC5haSBjbGllbnQgcHJveHkuXG4gKiBVc2UgaXQgd2l0aCB0aGUgL3BhZ2VzIHJvdXRlciBpbiBOZXh0LmpzLlxuICpcbiAqIEBwYXJhbSByZXF1ZXN0IHRoZSBOZXh0IEFQSSByZXF1ZXN0IG9iamVjdC5cbiAqIEBwYXJhbSByZXNwb25zZSB0aGUgTmV4dCBBUEkgcmVzcG9uc2Ugb2JqZWN0LlxuICogQHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgcmVxdWVzdCBpcyBoYW5kbGVkLlxuICovXG5jb25zdCBoYW5kbGVyID0gKHJlcXVlc3QsIHJlc3BvbnNlKSA9PiB0c2xpYl8xLl9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgIHJldHVybiAoMCwgaW5kZXhfMS5oYW5kbGVSZXF1ZXN0KSh7XG4gICAgICAgIGlkOiAnbmV4dGpzLXBhZ2Utcm91dGVyJyxcbiAgICAgICAgbWV0aG9kOiByZXF1ZXN0Lm1ldGhvZCB8fCAnUE9TVCcsXG4gICAgICAgIHJlc3BvbmRXaXRoOiAoc3RhdHVzLCBkYXRhKSA9PiByZXNwb25zZS5zdGF0dXMoc3RhdHVzKS5qc29uKGRhdGEpLFxuICAgICAgICBnZXRIZWFkZXJzOiAoKSA9PiByZXF1ZXN0LmhlYWRlcnMsXG4gICAgICAgIGdldEhlYWRlcjogKG5hbWUpID0+IHJlcXVlc3QuaGVhZGVyc1tuYW1lXSxcbiAgICAgICAgc2VuZEhlYWRlcjogKG5hbWUsIHZhbHVlKSA9PiByZXNwb25zZS5zZXRIZWFkZXIobmFtZSwgdmFsdWUpLFxuICAgICAgICBnZXRCb2R5OiAoKSA9PiB0c2xpYl8xLl9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkgeyByZXR1cm4gSlNPTi5zdHJpbmdpZnkocmVxdWVzdC5ib2R5KTsgfSksXG4gICAgfSk7XG59KTtcbmV4cG9ydHMuaGFuZGxlciA9IGhhbmRsZXI7XG4vKipcbiAqIFRoZSBOZXh0IEFQSSByb3V0ZSBoYW5kbGVyIGZvciB0aGUgZmFsLmFpIGNsaWVudCBwcm94eSBvbiBBcHAgUm91dGVyIGFwcHMuXG4gKlxuICogQHBhcmFtIHJlcXVlc3QgdGhlIE5leHQgQVBJIHJlcXVlc3Qgb2JqZWN0LlxuICogQHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgcmVxdWVzdCBpcyBoYW5kbGVkLlxuICovXG5mdW5jdGlvbiByb3V0ZUhhbmRsZXIocmVxdWVzdCkge1xuICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgY29uc3QgcmVzcG9uc2VIZWFkZXJzID0ge307XG4gICAgICAgIHJldHVybiB5aWVsZCAoMCwgaW5kZXhfMS5oYW5kbGVSZXF1ZXN0KSh7XG4gICAgICAgICAgICBpZDogJ25leHRqcy1hcHAtcm91dGVyJyxcbiAgICAgICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICAgICAgICByZXNwb25kV2l0aDogKHN0YXR1cywgZGF0YSkgPT4gc2VydmVyXzEuTmV4dFJlc3BvbnNlLmpzb24oZGF0YSwge1xuICAgICAgICAgICAgICAgIHN0YXR1cyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGdldEhlYWRlcnM6ICgpID0+ICgwLCBpbmRleF8xLmZyb21IZWFkZXJzKShyZXF1ZXN0LmhlYWRlcnMpLFxuICAgICAgICAgICAgZ2V0SGVhZGVyOiAobmFtZSkgPT4gcmVxdWVzdC5oZWFkZXJzLmdldChuYW1lKSxcbiAgICAgICAgICAgIHNlbmRIZWFkZXI6IChuYW1lLCB2YWx1ZSkgPT4gKHJlc3BvbnNlSGVhZGVyc1tuYW1lXSA9IHZhbHVlKSxcbiAgICAgICAgICAgIGdldEJvZHk6ICgpID0+IHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkgeyByZXR1cm4gcmVxdWVzdC50ZXh0KCk7IH0pLFxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmV4cG9ydHMucm91dGUgPSB7XG4gICAgaGFuZGxlcjogcm91dGVIYW5kbGVyLFxuICAgIEdFVDogcm91dGVIYW5kbGVyLFxuICAgIFBPU1Q6IHJvdXRlSGFuZGxlcixcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1uZXh0anMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicm91dGUiLCJoYW5kbGVyIiwiUFJPWFlfUk9VVEUiLCJ0c2xpYl8xIiwicmVxdWlyZSIsImluZGV4XzEiLCJERUZBVUxUX1BST1hZX1JPVVRFIiwicmVxdWVzdCIsInJlc3BvbnNlIiwiX19hd2FpdGVyIiwiaGFuZGxlUmVxdWVzdCIsImlkIiwibWV0aG9kIiwicmVzcG9uZFdpdGgiLCJzdGF0dXMiLCJkYXRhIiwianNvbiIsImdldEhlYWRlcnMiLCJoZWFkZXJzIiwiZ2V0SGVhZGVyIiwibmFtZSIsInNlbmRIZWFkZXIiLCJzZXRIZWFkZXIiLCJnZXRCb2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsImJvZHkiLCJyb3V0ZUhhbmRsZXIiLCJyZXNwb25zZUhlYWRlcnMiLCJzZXJ2ZXJfMSIsImZyb21IZWFkZXJzIiwiZ2V0IiwidGV4dCIsIkdFVCIsIlBPU1QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@fal-ai/serverless-proxy/src/nextjs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fal-ai/serverless-client/package.json":
/*!*************************************************************!*\
  !*** ./node_modules/@fal-ai/serverless-client/package.json ***!
  \*************************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"@fal-ai/serverless-client","description":"The fal serverless JS/TS client","version":"0.8.6","license":"MIT","repository":{"type":"git","url":"https://github.com/fal-ai/fal-js.git","directory":"libs/client"},"keywords":["fal","serverless","client","ai","ml"],"dependencies":{"@msgpack/msgpack":"^3.0.0-beta2","robot3":"^0.4.1","uuid-random":"^1.3.2"},"engines":{"node":">=18.0.0"},"main":"./src/index.js","type":"commonjs"}');

/***/ })

};
;