"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["reactPlayerMux"],{

/***/ "(app-pages-browser)/./node_modules/react-player/lib/players/Mux.js":
/*!******************************************************!*\
  !*** ./node_modules/react-player/lib/players/Mux.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar Mux_exports = {};\n__export(Mux_exports, {\n    default: ()=>Mux\n});\nmodule.exports = __toCommonJS(Mux_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"));\nvar import_patterns = __webpack_require__(/*! ../patterns */ \"(app-pages-browser)/./node_modules/react-player/lib/patterns.js\");\nconst SDK_URL = \"https://cdn.jsdelivr.net/npm/@mux/mux-player@VERSION/dist/mux-player.mjs\";\nclass Mux extends import_react.Component {\n    componentDidMount() {\n        this.props.onMount && this.props.onMount(this);\n        this.addListeners(this.player);\n        const playbackId = this.getPlaybackId(this.props.url);\n        if (playbackId) {\n            this.player.playbackId = playbackId;\n        }\n    }\n    componentWillUnmount() {\n        this.player.playbackId = null;\n        this.removeListeners(this.player);\n    }\n    addListeners(player) {\n        const { playsinline } = this.props;\n        player.addEventListener(\"play\", this.onPlay);\n        player.addEventListener(\"waiting\", this.onBuffer);\n        player.addEventListener(\"playing\", this.onBufferEnd);\n        player.addEventListener(\"pause\", this.onPause);\n        player.addEventListener(\"seeked\", this.onSeek);\n        player.addEventListener(\"ended\", this.onEnded);\n        player.addEventListener(\"error\", this.onError);\n        player.addEventListener(\"ratechange\", this.onPlayBackRateChange);\n        player.addEventListener(\"enterpictureinpicture\", this.onEnablePIP);\n        player.addEventListener(\"leavepictureinpicture\", this.onDisablePIP);\n        player.addEventListener(\"webkitpresentationmodechanged\", this.onPresentationModeChange);\n        player.addEventListener(\"canplay\", this.onReady);\n        if (playsinline) {\n            player.setAttribute(\"playsinline\", \"\");\n        }\n    }\n    removeListeners(player) {\n        player.removeEventListener(\"canplay\", this.onReady);\n        player.removeEventListener(\"play\", this.onPlay);\n        player.removeEventListener(\"waiting\", this.onBuffer);\n        player.removeEventListener(\"playing\", this.onBufferEnd);\n        player.removeEventListener(\"pause\", this.onPause);\n        player.removeEventListener(\"seeked\", this.onSeek);\n        player.removeEventListener(\"ended\", this.onEnded);\n        player.removeEventListener(\"error\", this.onError);\n        player.removeEventListener(\"ratechange\", this.onPlayBackRateChange);\n        player.removeEventListener(\"enterpictureinpicture\", this.onEnablePIP);\n        player.removeEventListener(\"leavepictureinpicture\", this.onDisablePIP);\n        player.removeEventListener(\"canplay\", this.onReady);\n    }\n    async load(url) {\n        var _a;\n        const { onError, config } = this.props;\n        if (!((_a = globalThis.customElements) == null ? void 0 : _a.get(\"mux-player\"))) {\n            try {\n                const sdkUrl = SDK_URL.replace(\"VERSION\", config.version);\n                await import(/* webpackIgnore: true */ \"\".concat(sdkUrl));\n                this.props.onLoaded();\n            } catch (error) {\n                onError(error);\n            }\n        }\n        const [, id] = url.match(import_patterns.MATCH_URL_MUX);\n        this.player.playbackId = id;\n    }\n    play() {\n        const promise = this.player.play();\n        if (promise) {\n            promise.catch(this.props.onError);\n        }\n    }\n    pause() {\n        this.player.pause();\n    }\n    stop() {\n        this.player.playbackId = null;\n    }\n    seekTo(seconds) {\n        let keepPlaying = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;\n        this.player.currentTime = seconds;\n        if (!keepPlaying) {\n            this.pause();\n        }\n    }\n    setVolume(fraction) {\n        this.player.volume = fraction;\n    }\n    enablePIP() {\n        if (this.player.requestPictureInPicture && document.pictureInPictureElement !== this.player) {\n            this.player.requestPictureInPicture();\n        }\n    }\n    disablePIP() {\n        if (document.exitPictureInPicture && document.pictureInPictureElement === this.player) {\n            document.exitPictureInPicture();\n        }\n    }\n    setPlaybackRate(rate) {\n        try {\n            this.player.playbackRate = rate;\n        } catch (error) {\n            this.props.onError(error);\n        }\n    }\n    getDuration() {\n        if (!this.player) return null;\n        const { duration, seekable } = this.player;\n        if (duration === Infinity && seekable.length > 0) {\n            return seekable.end(seekable.length - 1);\n        }\n        return duration;\n    }\n    getCurrentTime() {\n        if (!this.player) return null;\n        return this.player.currentTime;\n    }\n    getSecondsLoaded() {\n        if (!this.player) return null;\n        const { buffered } = this.player;\n        if (buffered.length === 0) {\n            return 0;\n        }\n        const end = buffered.end(buffered.length - 1);\n        const duration = this.getDuration();\n        if (end > duration) {\n            return duration;\n        }\n        return end;\n    }\n    getPlaybackId(url) {\n        const [, id] = url.match(import_patterns.MATCH_URL_MUX);\n        return id;\n    }\n    render() {\n        const { url, playing, loop, controls, muted, config, width, height } = this.props;\n        const style = {\n            width: width === \"auto\" ? width : \"100%\",\n            height: height === \"auto\" ? height : \"100%\"\n        };\n        if (controls === false) {\n            style[\"--controls\"] = \"none\";\n        }\n        return /* @__PURE__ */ import_react.default.createElement(\"mux-player\", {\n            ref: this.ref,\n            \"playback-id\": this.getPlaybackId(url),\n            style,\n            preload: \"auto\",\n            autoPlay: playing || void 0,\n            muted: muted ? \"\" : void 0,\n            loop: loop ? \"\" : void 0,\n            ...config.attributes\n        });\n    }\n    constructor(){\n        var _this;\n        super(...arguments), _this = this;\n        // Proxy methods to prevent listener leaks\n        __publicField(this, \"onReady\", function() {\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            return _this.props.onReady(...args);\n        });\n        __publicField(this, \"onPlay\", function() {\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            return _this.props.onPlay(...args);\n        });\n        __publicField(this, \"onBuffer\", function() {\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            return _this.props.onBuffer(...args);\n        });\n        __publicField(this, \"onBufferEnd\", function() {\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            return _this.props.onBufferEnd(...args);\n        });\n        __publicField(this, \"onPause\", function() {\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            return _this.props.onPause(...args);\n        });\n        __publicField(this, \"onEnded\", function() {\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            return _this.props.onEnded(...args);\n        });\n        __publicField(this, \"onError\", function() {\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            return _this.props.onError(...args);\n        });\n        __publicField(this, \"onPlayBackRateChange\", (event)=>this.props.onPlaybackRateChange(event.target.playbackRate));\n        __publicField(this, \"onEnablePIP\", function() {\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            return _this.props.onEnablePIP(...args);\n        });\n        __publicField(this, \"onSeek\", (e)=>{\n            this.props.onSeek(e.target.currentTime);\n        });\n        __publicField(this, \"onDurationChange\", ()=>{\n            const duration = this.getDuration();\n            this.props.onDuration(duration);\n        });\n        __publicField(this, \"mute\", ()=>{\n            this.player.muted = true;\n        });\n        __publicField(this, \"unmute\", ()=>{\n            this.player.muted = false;\n        });\n        __publicField(this, \"ref\", (player)=>{\n            this.player = player;\n        });\n    }\n}\n__publicField(Mux, \"displayName\", \"Mux\");\n__publicField(Mux, \"canPlay\", import_patterns.canPlay.mux);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZWFjdC1wbGF5ZXIvbGliL3BsYXllcnMvTXV4LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxXQUFXQyxPQUFPQyxNQUFNO0FBQzVCLElBQUlDLFlBQVlGLE9BQU9HLGNBQWM7QUFDckMsSUFBSUMsbUJBQW1CSixPQUFPSyx3QkFBd0I7QUFDdEQsSUFBSUMsb0JBQW9CTixPQUFPTyxtQkFBbUI7QUFDbEQsSUFBSUMsZUFBZVIsT0FBT1MsY0FBYztBQUN4QyxJQUFJQyxlQUFlVixPQUFPVyxTQUFTLENBQUNDLGNBQWM7QUFDbEQsSUFBSUMsa0JBQWtCLENBQUNDLEtBQUtDLEtBQUtDLFFBQVVELE9BQU9ELE1BQU1aLFVBQVVZLEtBQUtDLEtBQUs7UUFBRUUsWUFBWTtRQUFNQyxjQUFjO1FBQU1DLFVBQVU7UUFBTUg7SUFBTSxLQUFLRixHQUFHLENBQUNDLElBQUksR0FBR0M7QUFDMUosSUFBSUksV0FBVyxDQUFDQyxRQUFRQztJQUN0QixJQUFLLElBQUlDLFFBQVFELElBQ2ZwQixVQUFVbUIsUUFBUUUsTUFBTTtRQUFFQyxLQUFLRixHQUFHLENBQUNDLEtBQUs7UUFBRU4sWUFBWTtJQUFLO0FBQy9EO0FBQ0EsSUFBSVEsY0FBYyxDQUFDQyxJQUFJQyxNQUFNQyxRQUFRQztJQUNuQyxJQUFJRixRQUFRLE9BQU9BLFNBQVMsWUFBWSxPQUFPQSxTQUFTLFlBQVk7UUFDbEUsS0FBSyxJQUFJWixPQUFPVCxrQkFBa0JxQixNQUNoQyxJQUFJLENBQUNqQixhQUFhb0IsSUFBSSxDQUFDSixJQUFJWCxRQUFRQSxRQUFRYSxRQUN6QzFCLFVBQVV3QixJQUFJWCxLQUFLO1lBQUVTLEtBQUssSUFBTUcsSUFBSSxDQUFDWixJQUFJO1lBQUVFLFlBQVksQ0FBRVksQ0FBQUEsT0FBT3pCLGlCQUFpQnVCLE1BQU1aLElBQUcsS0FBTWMsS0FBS1osVUFBVTtRQUFDO0lBQ3RIO0lBQ0EsT0FBT1M7QUFDVDtBQUNBLElB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bUJBQVMsTUFBS25GLEtBQUssQ0FBQ2dCLE9BQU8sSUFBSW1FOztRQUNsRS9GLGNBQWMsSUFBSSxFQUFFLFdBQVc7NkNBQUkrRjtnQkFBQUE7O21CQUFTLE1BQUtuRixLQUFLLENBQUNpQixPQUFPLElBQUlrRTs7UUFDbEUvRixjQUFjLElBQUksRUFBRSx3QkFBd0IsQ0FBQ2dHLFFBQVUsSUFBSSxDQUFDcEYsS0FBSyxDQUFDcUYsb0JBQW9CLENBQUNELE1BQU0vRyxNQUFNLENBQUNxRixZQUFZO1FBQ2hIdEUsY0FBYyxJQUFJLEVBQUUsZUFBZTs2Q0FBSStGO2dCQUFBQTs7bUJBQVMsTUFBS25GLEtBQUssQ0FBQ21CLFdBQVcsSUFBSWdFOztRQUMxRS9GLGNBQWMsSUFBSSxFQUFFLFVBQVUsQ0FBQ2tHO1lBQzdCLElBQUksQ0FBQ3RGLEtBQUssQ0FBQ2UsTUFBTSxDQUFDdUUsRUFBRWpILE1BQU0sQ0FBQ3lFLFdBQVc7UUFDeEM7UUFDQTFELGNBQWMsSUFBSSxFQUFFLG9CQUFvQjtZQUN0QyxNQUFNd0UsV0FBVyxJQUFJLENBQUNELFdBQVc7WUFDakMsSUFBSSxDQUFDM0QsS0FBSyxDQUFDdUYsVUFBVSxDQUFDM0I7UUFDeEI7UUFDQXhFLGNBQWMsSUFBSSxFQUFFLFFBQVE7WUFDMUIsSUFBSSxDQUFDZSxNQUFNLENBQUNxRSxLQUFLLEdBQUc7UUFDdEI7UUFDQXBGLGNBQWMsSUFBSSxFQUFFLFVBQVU7WUFDNUIsSUFBSSxDQUFDZSxNQUFNLENBQUNxRSxLQUFLLEdBQUc7UUFDdEI7UUFDQXBGLGNBQWMsSUFBSSxFQUFFLE9BQU8sQ0FBQ2U7WUFDMUIsSUFBSSxDQUFDQSxNQUFNLEdBQUdBO1FBQ2hCO0lBQ0Y7QUE0SkY7QUFDQWYsY0FBY0csS0FBSyxlQUFlO0FBQ2xDSCxjQUFjRyxLQUFLLFdBQVdLLGdCQUFnQjRGLE9BQU8sQ0FBQ0MsR0FBRyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9wbGF5ZXJzL011eC5qcz9jMzIxIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2NyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19nZXRQcm90b09mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19kZWZOb3JtYWxQcm9wID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ga2V5IGluIG9iaiA/IF9fZGVmUHJvcChvYmosIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCB2YWx1ZSB9KSA6IG9ialtrZXldID0gdmFsdWU7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0VTTSA9IChtb2QsIGlzTm9kZU1vZGUsIHRhcmdldCkgPT4gKHRhcmdldCA9IG1vZCAhPSBudWxsID8gX19jcmVhdGUoX19nZXRQcm90b09mKG1vZCkpIDoge30sIF9fY29weVByb3BzKFxuICAvLyBJZiB0aGUgaW1wb3J0ZXIgaXMgaW4gbm9kZSBjb21wYXRpYmlsaXR5IG1vZGUgb3IgdGhpcyBpcyBub3QgYW4gRVNNXG4gIC8vIGZpbGUgdGhhdCBoYXMgYmVlbiBjb252ZXJ0ZWQgdG8gYSBDb21tb25KUyBmaWxlIHVzaW5nIGEgQmFiZWwtXG4gIC8vIGNvbXBhdGlibGUgdHJhbnNmb3JtIChpLmUuIFwiX19lc01vZHVsZVwiIGhhcyBub3QgYmVlbiBzZXQpLCB0aGVuIHNldFxuICAvLyBcImRlZmF1bHRcIiB0byB0aGUgQ29tbW9uSlMgXCJtb2R1bGUuZXhwb3J0c1wiIGZvciBub2RlIGNvbXBhdGliaWxpdHkuXG4gIGlzTm9kZU1vZGUgfHwgIW1vZCB8fCAhbW9kLl9fZXNNb2R1bGUgPyBfX2RlZlByb3AodGFyZ2V0LCBcImRlZmF1bHRcIiwgeyB2YWx1ZTogbW9kLCBlbnVtZXJhYmxlOiB0cnVlIH0pIDogdGFyZ2V0LFxuICBtb2RcbikpO1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgX19wdWJsaWNGaWVsZCA9IChvYmosIGtleSwgdmFsdWUpID0+IHtcbiAgX19kZWZOb3JtYWxQcm9wKG9iaiwgdHlwZW9mIGtleSAhPT0gXCJzeW1ib2xcIiA/IGtleSArIFwiXCIgOiBrZXksIHZhbHVlKTtcbiAgcmV0dXJuIHZhbHVlO1xufTtcbnZhciBNdXhfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoTXV4X2V4cG9ydHMsIHtcbiAgZGVmYXVsdDogKCkgPT4gTXV4XG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKE11eF9leHBvcnRzKTtcbnZhciBpbXBvcnRfcmVhY3QgPSBfX3RvRVNNKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgaW1wb3J0X3BhdHRlcm5zID0gcmVxdWlyZShcIi4uL3BhdHRlcm5zXCIpO1xuY29uc3QgU0RLX1VSTCA9IFwiaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9AbXV4L211eC1wbGF5ZXJAVkVSU0lPTi9kaXN0L211eC1wbGF5ZXIubWpzXCI7XG5jbGFzcyBNdXggZXh0ZW5kcyBpbXBvcnRfcmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAvLyBQcm94eSBtZXRob2RzIHRvIHByZXZlbnQgbGlzdGVuZXIgbGVha3NcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwib25SZWFkeVwiLCAoLi4uYXJncykgPT4gdGhpcy5wcm9wcy5vblJlYWR5KC4uLmFyZ3MpKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwib25QbGF5XCIsICguLi5hcmdzKSA9PiB0aGlzLnByb3BzLm9uUGxheSguLi5hcmdzKSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIm9uQnVmZmVyXCIsICguLi5hcmdzKSA9PiB0aGlzLnByb3BzLm9uQnVmZmVyKC4uLmFyZ3MpKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwib25CdWZmZXJFbmRcIiwgKC4uLmFyZ3MpID0+IHRoaXMucHJvcHMub25CdWZmZXJFbmQoLi4uYXJncykpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJvblBhdXNlXCIsICguLi5hcmdzKSA9PiB0aGlzLnByb3BzLm9uUGF1c2UoLi4uYXJncykpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJvbkVuZGVkXCIsICguLi5hcmdzKSA9PiB0aGlzLnByb3BzLm9uRW5kZWQoLi4uYXJncykpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJvbkVycm9yXCIsICguLi5hcmdzKSA9PiB0aGlzLnByb3BzLm9uRXJyb3IoLi4uYXJncykpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJvblBsYXlCYWNrUmF0ZUNoYW5nZVwiLCAoZXZlbnQpID0+IHRoaXMucHJvcHMub25QbGF5YmFja1JhdGVDaGFuZ2UoZXZlbnQudGFyZ2V0LnBsYXliYWNrUmF0ZSkpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJvbkVuYWJsZVBJUFwiLCAoLi4uYXJncykgPT4gdGhpcy5wcm9wcy5vbkVuYWJsZVBJUCguLi5hcmdzKSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIm9uU2Vla1wiLCAoZSkgPT4ge1xuICAgICAgdGhpcy5wcm9wcy5vblNlZWsoZS50YXJnZXQuY3VycmVudFRpbWUpO1xuICAgIH0pO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJvbkR1cmF0aW9uQ2hhbmdlXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IGR1cmF0aW9uID0gdGhpcy5nZXREdXJhdGlvbigpO1xuICAgICAgdGhpcy5wcm9wcy5vbkR1cmF0aW9uKGR1cmF0aW9uKTtcbiAgICB9KTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwibXV0ZVwiLCAoKSA9PiB7XG4gICAgICB0aGlzLnBsYXllci5tdXRlZCA9IHRydWU7XG4gICAgfSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInVubXV0ZVwiLCAoKSA9PiB7XG4gICAgICB0aGlzLnBsYXllci5tdXRlZCA9IGZhbHNlO1xuICAgIH0pO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJyZWZcIiwgKHBsYXllcikgPT4ge1xuICAgICAgdGhpcy5wbGF5ZXIgPSBwbGF5ZXI7XG4gICAgfSk7XG4gIH1cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5wcm9wcy5vbk1vdW50ICYmIHRoaXMucHJvcHMub25Nb3VudCh0aGlzKTtcbiAgICB0aGlzLmFkZExpc3RlbmVycyh0aGlzLnBsYXllcik7XG4gICAgY29uc3QgcGxheWJhY2tJZCA9IHRoaXMuZ2V0UGxheWJhY2tJZCh0aGlzLnByb3BzLnVybCk7XG4gICAgaWYgKHBsYXliYWNrSWQpIHtcbiAgICAgIHRoaXMucGxheWVyLnBsYXliYWNrSWQgPSBwbGF5YmFja0lkO1xuICAgIH1cbiAgfVxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLnBsYXllci5wbGF5YmFja0lkID0gbnVsbDtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVycyh0aGlzLnBsYXllcik7XG4gIH1cbiAgYWRkTGlzdGVuZXJzKHBsYXllcikge1xuICAgIGNvbnN0IHsgcGxheXNpbmxpbmUgfSA9IHRoaXMucHJvcHM7XG4gICAgcGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoXCJwbGF5XCIsIHRoaXMub25QbGF5KTtcbiAgICBwbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcihcIndhaXRpbmdcIiwgdGhpcy5vbkJ1ZmZlcik7XG4gICAgcGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoXCJwbGF5aW5nXCIsIHRoaXMub25CdWZmZXJFbmQpO1xuICAgIHBsYXllci5hZGRFdmVudExpc3RlbmVyKFwicGF1c2VcIiwgdGhpcy5vblBhdXNlKTtcbiAgICBwbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcihcInNlZWtlZFwiLCB0aGlzLm9uU2Vlayk7XG4gICAgcGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoXCJlbmRlZFwiLCB0aGlzLm9uRW5kZWQpO1xuICAgIHBsYXllci5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgdGhpcy5vbkVycm9yKTtcbiAgICBwbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcihcInJhdGVjaGFuZ2VcIiwgdGhpcy5vblBsYXlCYWNrUmF0ZUNoYW5nZSk7XG4gICAgcGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoXCJlbnRlcnBpY3R1cmVpbnBpY3R1cmVcIiwgdGhpcy5vbkVuYWJsZVBJUCk7XG4gICAgcGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoXCJsZWF2ZXBpY3R1cmVpbnBpY3R1cmVcIiwgdGhpcy5vbkRpc2FibGVQSVApO1xuICAgIHBsYXllci5hZGRFdmVudExpc3RlbmVyKFwid2Via2l0cHJlc2VudGF0aW9ubW9kZWNoYW5nZWRcIiwgdGhpcy5vblByZXNlbnRhdGlvbk1vZGVDaGFuZ2UpO1xuICAgIHBsYXllci5hZGRFdmVudExpc3RlbmVyKFwiY2FucGxheVwiLCB0aGlzLm9uUmVhZHkpO1xuICAgIGlmIChwbGF5c2lubGluZSkge1xuICAgICAgcGxheWVyLnNldEF0dHJpYnV0ZShcInBsYXlzaW5saW5lXCIsIFwiXCIpO1xuICAgIH1cbiAgfVxuICByZW1vdmVMaXN0ZW5lcnMocGxheWVyKSB7XG4gICAgcGxheWVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjYW5wbGF5XCIsIHRoaXMub25SZWFkeSk7XG4gICAgcGxheWVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwbGF5XCIsIHRoaXMub25QbGF5KTtcbiAgICBwbGF5ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIndhaXRpbmdcIiwgdGhpcy5vbkJ1ZmZlcik7XG4gICAgcGxheWVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwbGF5aW5nXCIsIHRoaXMub25CdWZmZXJFbmQpO1xuICAgIHBsYXllci5yZW1vdmVFdmVudExpc3RlbmVyKFwicGF1c2VcIiwgdGhpcy5vblBhdXNlKTtcbiAgICBwbGF5ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNlZWtlZFwiLCB0aGlzLm9uU2Vlayk7XG4gICAgcGxheWVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJlbmRlZFwiLCB0aGlzLm9uRW5kZWQpO1xuICAgIHBsYXllci5yZW1vdmVFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgdGhpcy5vbkVycm9yKTtcbiAgICBwbGF5ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJhdGVjaGFuZ2VcIiwgdGhpcy5vblBsYXlCYWNrUmF0ZUNoYW5nZSk7XG4gICAgcGxheWVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJlbnRlcnBpY3R1cmVpbnBpY3R1cmVcIiwgdGhpcy5vbkVuYWJsZVBJUCk7XG4gICAgcGxheWVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJsZWF2ZXBpY3R1cmVpbnBpY3R1cmVcIiwgdGhpcy5vbkRpc2FibGVQSVApO1xuICAgIHBsYXllci5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2FucGxheVwiLCB0aGlzLm9uUmVhZHkpO1xuICB9XG4gIGFzeW5jIGxvYWQodXJsKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IHsgb25FcnJvciwgY29uZmlnIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmICghKChfYSA9IGdsb2JhbFRoaXMuY3VzdG9tRWxlbWVudHMpID09IG51bGwgPyB2b2lkIDAgOiBfYS5nZXQoXCJtdXgtcGxheWVyXCIpKSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgc2RrVXJsID0gU0RLX1VSTC5yZXBsYWNlKFwiVkVSU0lPTlwiLCBjb25maWcudmVyc2lvbik7XG4gICAgICAgIGF3YWl0IGltcG9ydChcbiAgICAgICAgICAvKiB3ZWJwYWNrSWdub3JlOiB0cnVlICovXG4gICAgICAgICAgYCR7c2RrVXJsfWBcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5wcm9wcy5vbkxvYWRlZCgpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgb25FcnJvcihlcnJvcik7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IFssIGlkXSA9IHVybC5tYXRjaChpbXBvcnRfcGF0dGVybnMuTUFUQ0hfVVJMX01VWCk7XG4gICAgdGhpcy5wbGF5ZXIucGxheWJhY2tJZCA9IGlkO1xuICB9XG4gIHBsYXkoKSB7XG4gICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucGxheWVyLnBsYXkoKTtcbiAgICBpZiAocHJvbWlzZSkge1xuICAgICAgcHJvbWlzZS5jYXRjaCh0aGlzLnByb3BzLm9uRXJyb3IpO1xuICAgIH1cbiAgfVxuICBwYXVzZSgpIHtcbiAgICB0aGlzLnBsYXllci5wYXVzZSgpO1xuICB9XG4gIHN0b3AoKSB7XG4gICAgdGhpcy5wbGF5ZXIucGxheWJhY2tJZCA9IG51bGw7XG4gIH1cbiAgc2Vla1RvKHNlY29uZHMsIGtlZXBQbGF5aW5nID0gdHJ1ZSkge1xuICAgIHRoaXMucGxheWVyLmN1cnJlbnRUaW1lID0gc2Vjb25kcztcbiAgICBpZiAoIWtlZXBQbGF5aW5nKSB7XG4gICAgICB0aGlzLnBhdXNlKCk7XG4gICAgfVxuICB9XG4gIHNldFZvbHVtZShmcmFjdGlvbikge1xuICAgIHRoaXMucGxheWVyLnZvbHVtZSA9IGZyYWN0aW9uO1xuICB9XG4gIGVuYWJsZVBJUCgpIHtcbiAgICBpZiAodGhpcy5wbGF5ZXIucmVxdWVzdFBpY3R1cmVJblBpY3R1cmUgJiYgZG9jdW1lbnQucGljdHVyZUluUGljdHVyZUVsZW1lbnQgIT09IHRoaXMucGxheWVyKSB7XG4gICAgICB0aGlzLnBsYXllci5yZXF1ZXN0UGljdHVyZUluUGljdHVyZSgpO1xuICAgIH1cbiAgfVxuICBkaXNhYmxlUElQKCkge1xuICAgIGlmIChkb2N1bWVudC5leGl0UGljdHVyZUluUGljdHVyZSAmJiBkb2N1bWVudC5waWN0dXJlSW5QaWN0dXJlRWxlbWVudCA9PT0gdGhpcy5wbGF5ZXIpIHtcbiAgICAgIGRvY3VtZW50LmV4aXRQaWN0dXJlSW5QaWN0dXJlKCk7XG4gICAgfVxuICB9XG4gIHNldFBsYXliYWNrUmF0ZShyYXRlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMucGxheWVyLnBsYXliYWNrUmF0ZSA9IHJhdGU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMucHJvcHMub25FcnJvcihlcnJvcik7XG4gICAgfVxuICB9XG4gIGdldER1cmF0aW9uKCkge1xuICAgIGlmICghdGhpcy5wbGF5ZXIpXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjb25zdCB7IGR1cmF0aW9uLCBzZWVrYWJsZSB9ID0gdGhpcy5wbGF5ZXI7XG4gICAgaWYgKGR1cmF0aW9uID09PSBJbmZpbml0eSAmJiBzZWVrYWJsZS5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gc2Vla2FibGUuZW5kKHNlZWthYmxlLmxlbmd0aCAtIDEpO1xuICAgIH1cbiAgICByZXR1cm4gZHVyYXRpb247XG4gIH1cbiAgZ2V0Q3VycmVudFRpbWUoKSB7XG4gICAgaWYgKCF0aGlzLnBsYXllcilcbiAgICAgIHJldHVybiBudWxsO1xuICAgIHJldHVybiB0aGlzLnBsYXllci5jdXJyZW50VGltZTtcbiAgfVxuICBnZXRTZWNvbmRzTG9hZGVkKCkge1xuICAgIGlmICghdGhpcy5wbGF5ZXIpXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjb25zdCB7IGJ1ZmZlcmVkIH0gPSB0aGlzLnBsYXllcjtcbiAgICBpZiAoYnVmZmVyZWQubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgY29uc3QgZW5kID0gYnVmZmVyZWQuZW5kKGJ1ZmZlcmVkLmxlbmd0aCAtIDEpO1xuICAgIGNvbnN0IGR1cmF0aW9uID0gdGhpcy5nZXREdXJhdGlvbigpO1xuICAgIGlmIChlbmQgPiBkdXJhdGlvbikge1xuICAgICAgcmV0dXJuIGR1cmF0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gZW5kO1xuICB9XG4gIGdldFBsYXliYWNrSWQodXJsKSB7XG4gICAgY29uc3QgWywgaWRdID0gdXJsLm1hdGNoKGltcG9ydF9wYXR0ZXJucy5NQVRDSF9VUkxfTVVYKTtcbiAgICByZXR1cm4gaWQ7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgdXJsLCBwbGF5aW5nLCBsb29wLCBjb250cm9scywgbXV0ZWQsIGNvbmZpZywgd2lkdGgsIGhlaWdodCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBzdHlsZSA9IHtcbiAgICAgIHdpZHRoOiB3aWR0aCA9PT0gXCJhdXRvXCIgPyB3aWR0aCA6IFwiMTAwJVwiLFxuICAgICAgaGVpZ2h0OiBoZWlnaHQgPT09IFwiYXV0b1wiID8gaGVpZ2h0IDogXCIxMDAlXCJcbiAgICB9O1xuICAgIGlmIChjb250cm9scyA9PT0gZmFsc2UpIHtcbiAgICAgIHN0eWxlW1wiLS1jb250cm9sc1wiXSA9IFwibm9uZVwiO1xuICAgIH1cbiAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIGltcG9ydF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBcIm11eC1wbGF5ZXJcIixcbiAgICAgIHtcbiAgICAgICAgcmVmOiB0aGlzLnJlZixcbiAgICAgICAgXCJwbGF5YmFjay1pZFwiOiB0aGlzLmdldFBsYXliYWNrSWQodXJsKSxcbiAgICAgICAgc3R5bGUsXG4gICAgICAgIHByZWxvYWQ6IFwiYXV0b1wiLFxuICAgICAgICBhdXRvUGxheTogcGxheWluZyB8fCB2b2lkIDAsXG4gICAgICAgIG11dGVkOiBtdXRlZCA/IFwiXCIgOiB2b2lkIDAsXG4gICAgICAgIGxvb3A6IGxvb3AgPyBcIlwiIDogdm9pZCAwLFxuICAgICAgICAuLi5jb25maWcuYXR0cmlidXRlc1xuICAgICAgfVxuICAgICk7XG4gIH1cbn1cbl9fcHVibGljRmllbGQoTXV4LCBcImRpc3BsYXlOYW1lXCIsIFwiTXV4XCIpO1xuX19wdWJsaWNGaWVsZChNdXgsIFwiY2FuUGxheVwiLCBpbXBvcnRfcGF0dGVybnMuY2FuUGxheS5tdXgpO1xuIl0sIm5hbWVzIjpbIl9fY3JlYXRlIiwiT2JqZWN0IiwiY3JlYXRlIiwiX19kZWZQcm9wIiwiZGVmaW5lUHJvcGVydHkiLCJfX2dldE93blByb3BEZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX19nZXRPd25Qcm9wTmFtZXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiX19nZXRQcm90b09mIiwiZ2V0UHJvdG90eXBlT2YiLCJfX2hhc093blByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsIl9fZGVmTm9ybWFsUHJvcCIsIm9iaiIsImtleSIsInZhbHVlIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiX19leHBvcnQiLCJ0YXJnZXQiLCJhbGwiLCJuYW1lIiwiZ2V0IiwiX19jb3B5UHJvcHMiLCJ0byIsImZyb20iLCJleGNlcHQiLCJkZXNjIiwiY2FsbCIsIl9fdG9FU00iLCJtb2QiLCJpc05vZGVNb2RlIiwiX19lc01vZHVsZSIsIl9fdG9Db21tb25KUyIsIl9fcHVibGljRmllbGQiLCJNdXhfZXhwb3J0cyIsImRlZmF1bHQiLCJNdXgiLCJtb2R1bGUiLCJleHBvcnRzIiwiaW1wb3J0X3JlYWN0IiwicmVxdWlyZSIsImltcG9ydF9wYXR0ZXJucyIsIlNES19VUkwiLCJDb21wb25lbnQiLCJjb21wb25lbnREaWRNb3VudCIsInByb3BzIiwib25Nb3VudCIsImFkZExpc3RlbmVycyIsInBsYXllciIsInBsYXliYWNrSWQiLCJnZXRQbGF5YmFja0lkIiwidXJsIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJyZW1vdmVMaXN0ZW5lcnMiLCJwbGF5c2lubGluZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJvblBsYXkiLCJvbkJ1ZmZlciIsIm9uQnVmZmVyRW5kIiwib25QYXVzZSIsIm9uU2VlayIsIm9uRW5kZWQiLCJvbkVycm9yIiwib25QbGF5QmFja1JhdGVDaGFuZ2UiLCJvbkVuYWJsZVBJUCIsIm9uRGlzYWJsZVBJUCIsIm9uUHJlc2VudGF0aW9uTW9kZUNoYW5nZSIsIm9uUmVhZHkiLCJzZXRBdHRyaWJ1dGUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwibG9hZCIsIl9hIiwiY29uZmlnIiwiZ2xvYmFsVGhpcyIsImN1c3RvbUVsZW1lbnRzIiwic2RrVXJsIiwicmVwbGFjZSIsInZlcnNpb24iLCJvbkxvYWRlZCIsImVycm9yIiwiaWQiLCJtYXRjaCIsIk1BVENIX1VSTF9NVVgiLCJwbGF5IiwicHJvbWlzZSIsImNhdGNoIiwicGF1c2UiLCJzdG9wIiwic2Vla1RvIiwic2Vjb25kcyIsImtlZXBQbGF5aW5nIiwiY3VycmVudFRpbWUiLCJzZXRWb2x1bWUiLCJmcmFjdGlvbiIsInZvbHVtZSIsImVuYWJsZVBJUCIsInJlcXVlc3RQaWN0dXJlSW5QaWN0dXJlIiwiZG9jdW1lbnQiLCJwaWN0dXJlSW5QaWN0dXJlRWxlbWVudCIsImRpc2FibGVQSVAiLCJleGl0UGljdHVyZUluUGljdHVyZSIsInNldFBsYXliYWNrUmF0ZSIsInJhdGUiLCJwbGF5YmFja1JhdGUiLCJnZXREdXJhdGlvbiIsImR1cmF0aW9uIiwic2Vla2FibGUiLCJJbmZpbml0eSIsImxlbmd0aCIsImVuZCIsImdldEN1cnJlbnRUaW1lIiwiZ2V0U2Vjb25kc0xvYWRlZCIsImJ1ZmZlcmVkIiwicmVuZGVyIiwicGxheWluZyIsImxvb3AiLCJjb250cm9scyIsIm11dGVkIiwid2lkdGgiLCJoZWlnaHQiLCJzdHlsZSIsImNyZWF0ZUVsZW1lbnQiLCJyZWYiLCJwcmVsb2FkIiwiYXV0b1BsYXkiLCJhdHRyaWJ1dGVzIiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJhcmdzIiwiZXZlbnQiLCJvblBsYXliYWNrUmF0ZUNoYW5nZSIsImUiLCJvbkR1cmF0aW9uIiwiY2FuUGxheSIsIm11eCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-player/lib/players/Mux.js\n"));

/***/ })

}]);